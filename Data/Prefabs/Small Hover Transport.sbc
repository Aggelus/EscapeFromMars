<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Prefabs>
    <Prefab xsi:type="MyObjectBuilder_PrefabDefinition">
      <Id Type="MyObjectBuilder_PrefabDefinition" Subtype="Small Hover Transport" />
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>138332609624995637</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="0" y="0" z="0" />
            <Forward x="0.319627672" y="-0.9150015" z="0.246191442" />
            <Up x="0.656407356" y="0.4011947" z="0.6388835" />
            <Orientation>
              <X>0.201026589</X>
              <Y>0.763337433</Y>
              <Z>0.5089116</Z>
              <W>-0.343384981</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>142975055886472282</EntityId>
              <Min x="-4" y="10" z="15" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Atmospheric Thrusters 6</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>130393954934119031</EntityId>
              <Min x="4" y="10" z="15" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Atmospheric Thrusters 5</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="6" z="6" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="7" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="8" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="9" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="10" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="11" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="12" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="13" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="14" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="15" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="16" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="17" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="18" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="19" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="4" y="7" z="8" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="11" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="14" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>84921185283902278</EntityId>
              <Min x="-3" y="6" z="16" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <CustomName>Wheel Suspensions 6 [SLED] [LEFT] [BACK]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>128788689000755235</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>false</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>80</SpeedLimit>
              <PowerNew>0.2177498</PowerNew>
              <StrengthNew>0.202964514</StrengthNew>
              <FrictionNew>0</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>129683995607654451</EntityId>
              <Min x="-3" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <CustomName>Wheel Suspensions 8 [SLED] [LEFT] [FRONT]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>137557255885798199</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>false</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>80</SpeedLimit>
              <PowerNew>0.2177498</PowerNew>
              <StrengthNew>0.202964514</StrengthNew>
              <FrictionNew>0</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-4" y="7" z="8" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>99273479920272935</EntityId>
              <Min x="1" y="8" z="10" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0.2" y="-0.22" z="-0.45" />
              <CustomName>Timer Block [WCCT]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>wcct</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>119523483597591719</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="8" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="7" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="9" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="6" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="15" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-3" y="7" z="8" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="16" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="17" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>134443889087007505</EntityId>
              <Min x="3" y="6" z="16" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <CustomName>Wheel Suspensions 9 [SLED] [RIGHT]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>102948762502296254</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>false</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>80</SpeedLimit>
              <PowerNew>0.2177498</PowerNew>
              <StrengthNew>0.202964514</StrengthNew>
              <FrictionNew>0</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="16" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="15" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="15" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="2" y="7" z="21" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="7" z="20" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>86850736393160071</EntityId>
              <Min x="-1" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Gyroscope 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="15" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>132062973316601856</EntityId>
              <Min x="3" y="6" z="14" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <CustomName>Wheel Suspensions 10 [SLED] [RIGHT]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>140645626745154834</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>false</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>80</SpeedLimit>
              <PowerNew>0.2177498</PowerNew>
              <StrengthNew>0.202964514</StrengthNew>
              <FrictionNew>0</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="11" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="15" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="15" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="15" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="8" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="18" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="16" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="18" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="6" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="3" y="7" z="8" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>93658246257882856</EntityId>
              <Min x="-3" y="6" z="14" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <CustomName>Wheel Suspensions 7 [SLED] [LEFT]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>117882416690280294</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>false</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>80</SpeedLimit>
              <PowerNew>0.2177498</PowerNew>
              <StrengthNew>0.202964514</StrengthNew>
              <FrictionNew>0</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="19" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="19" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="7" z="20" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-2" y="7" z="21" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="14" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="15" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="16" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="17" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockLargeAtmosphericThrust</SubtypeName>
              <EntityId>142084524992085399</EntityId>
              <Min x="-1" y="7" z="17" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Large Atmospheric Thruster 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="15" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>143165643495074844</EntityId>
              <Min x="3" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <CustomName>Wheel Suspensions 11 [SLED] [RIGHT] [FRONT]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>132137183882686225</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>false</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>80</SpeedLimit>
              <PowerNew>0.2177498</PowerNew>
              <StrengthNew>0.202964514</StrengthNew>
              <FrictionNew>0</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="7" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="7" z="15" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>83282615027473483</EntityId>
              <Min x="1" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Gyroscope 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="7" z="9" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="7" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="-5" y="7" z="19" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="12" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="10" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="11" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="11" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="7" z="19" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="7" z="19" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="17" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="-5" y="6" z="19" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="5" y="6" z="19" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="18" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="18" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="9" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="18" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="7" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="7" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="8" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="17" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="16" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="5" y="6" z="6" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="18" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="9" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="5" y="7" z="19" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="15" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="8" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="7" z="18" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="-5" y="6" z="6" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="5" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundCorner</SubtypeName>
              <Min x="-5" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="6" z="16" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="6" z="16" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="6" z="15" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="6" z="15" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="6" z="9" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="6" z="9" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="14" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="13" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="12" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="11" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="15" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="9" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="14" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="7" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="4" y="6" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-4" y="6" z="10" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="7" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="11" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="10" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="16" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="9" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="6" z="10" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="6" z="13" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="7" z="18" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="12" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="16" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="15" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="14" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="17" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="17" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="16" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="15" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="13" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="14" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="-5" y="7" z="12" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorRoundSlope</SubtypeName>
              <Min x="5" y="7" z="13" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="6" z="6" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="6" z="6" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="7" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="6" z="20" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="6" z="20" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="6" z="20" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RemoteControl">
              <SubtypeName>SmallBlockRemoteControl</SubtypeName>
              <EntityId>100076937220052938</EntityId>
              <Min x="0" y="7" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Remote Control</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </BuildToolbar>
              <PreviousControlledEntityId xsi:nil="true" />
              <AutoPilotEnabled>false</AutoPilotEnabled>
              <FlightMode>2</FlightMode>
              <BindedCamera>0</BindedCamera>
              <CurrentWaypointIndex>-1</CurrentWaypointIndex>
              <Waypoints />
              <Direction>0</Direction>
              <DockingModeEnabled>false</DockingModeEnabled>
              <CollisionAvoidance>false</CollisionAvoidance>
              <Coords />
              <Names />
              <WaypointThresholdDistance>0</WaypointThresholdDistance>
              <IsMainRemoteControl>false</IsMainRemoteControl>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
              <SubtypeName>SmallBlockBeacon</SubtypeName>
              <EntityId>109036563461434558</EntityId>
              <Min x="0" y="8" z="10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Beacon</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <BroadcastRadius>100</BroadcastRadius>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>104164277386099643</EntityId>
              <Min x="-1" y="8" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Timer Block [WCCS]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>wccs</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>105582925522532584</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>wccs</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>101689890024081989</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>1200</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="9" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="8" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="-2" y="8" z="8" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="2" y="8" z="8" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="8" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>78413648037663563</EntityId>
              <Min x="-1" y="7" z="11" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 15</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>102008285898598169</EntityId>
              <Min x="-1" y="7" z="14" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 16</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="7" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="9" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="9" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="8" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="8" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="9" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="9" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="2" y="9" z="8" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="0.04" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-2" y="9" z="8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="9" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="9" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="8" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="8" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="8" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="8" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="9" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="9" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="9" z="12" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="9" z="13" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_LargeGatlingTurret">
              <SubtypeName>SmallGatlingTurret</SubtypeName>
              <EntityId>72868404302451045</EntityId>
              <Min x="-2" y="10" z="11" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>20</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                            <SubtypeName>NATO_25x184mm</SubtypeName>
                            <ProjectilesCount>0</ProjectilesCount>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.084</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Gatling Turret</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>true</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>20</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                      <SubtypeName>NATO_25x184mm</SubtypeName>
                      <ProjectilesCount>0</ProjectilesCount>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.084</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <RemainingAmmo>0</RemainingAmmo>
              <Target>0</Target>
              <IsPotentialTarget>true</IsPotentialTarget>
              <PreviousControlledEntityId xsi:nil="true" />
              <Rotation>0</Rotation>
              <Elevation>0</Elevation>
              <GunBase>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>0</LastShootTime>
              </GunBase>
              <EnableIdleRotation>true</EnableIdleRotation>
              <PreviousIdleRotationState>true</PreviousIdleRotationState>
              <TargetCharacters>true</TargetCharacters>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="9" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="10" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="-2" y="10" z="16" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="10" z="17" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="9" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>98225137068501621</EntityId>
              <Min x="-2" y="10" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Spotlight 8</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.270588249</ColorGreen>
              <Falloff>0.3</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>96630841525165265</EntityId>
              <Min x="2" y="10" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Spotlight 7</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.270588249</ColorGreen>
              <Falloff>0.3</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockBatteryBlock</SubtypeName>
              <EntityId>89396867534238434</EntityId>
              <Min x="2" y="8" z="15" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Battery 14</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>1.08</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="8" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="10" z="17" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockBatteryBlock</SubtypeName>
              <EntityId>79077401751349472</EntityId>
              <Min x="-4" y="8" z="15" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Battery 15</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>1.08</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="8" z="14" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>120809498887467216</EntityId>
              <Min x="-3" y="8" z="12" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>LCD Panel 11</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages>
                <string>Galactic Corporation Logo</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>107069285373553803</EntityId>
              <Min x="3" y="8" z="12" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>LCD Panel 10</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages>
                <string>Galactic Corporation Logo</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="10" z="9" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="10" z="10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="10" z="10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="10" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="10" z="16" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="2" y="10" z="17" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-2" y="10" z="17" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="10" z="16" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="2" y="10" z="16" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-3" y="8" z="8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="3" y="8" z="8" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="-3" y="8" z="9" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="3" y="8" z="9" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-3" y="9" z="9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="3" y="9" z="9" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-4" y="8" z="9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="4" y="8" z="9" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="8" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="8" z="10" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-4" y="8" z="10" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="4" y="8" z="10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-3" y="9" z="10" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="3" y="9" z="10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="8" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="8" z="11" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="4" y="8" z="11" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-4" y="8" z="11" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="3" y="9" z="11" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-3" y="9" z="11" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>119571302109903033</EntityId>
              <Min x="2" y="8" z="18" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Atmospheric Thrusters 10</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>142429438460632364</EntityId>
              <Min x="-4" y="8" z="18" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Atmospheric Thrusters 11</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>124962374329698884</EntityId>
              <Min x="2" y="9" z="18" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Atmospheric Thrusters 12</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>138093774078887812</EntityId>
              <Min x="-4" y="9" z="18" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
              <CustomName>Atmospheric Thrusters 13</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="10" z="9" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="10" z="9" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="10" z="10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="2" y="8" z="7" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-2" y="8" z="7" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="-2" y="9" z="9" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="2" y="9" z="9" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>140417908455968235</EntityId>
              <Min x="2" y="8" z="19" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Spotlight 10</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.270588249</ColorGreen>
              <Falloff>0.3</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>94812203990307464</EntityId>
              <Min x="-2" y="8" z="19" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
              <CustomName>Spotlight 9</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.270588249</ColorGreen>
              <Falloff>0.3</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="9" z="19" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="9" z="19" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-3" y="8" z="19" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="3" y="8" z="19" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="3" y="9" z="19" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner</SubtypeName>
              <Min x="-3" y="9" z="19" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>105582925522532584</EntityId>
              <Min x="0" y="7" z="9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.2" y="-0.22" z="-0.45" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>
                              [WORLD]
                              MaxWorldMps=100

                              [GRIDS]
                              NoFollow=NOFOLLOW
                              BlockIgnore=!WCC
                              OrientationBlockContains=[NAV]
                              OrientationBlockNamed=Craft Remote Control
                              GyroIgnore=!NAV
                              LIMIT_GYROS=3
                              LEAVE_GYROS=-1

                              [LOGGING]
                              TextPanelReport=Craft Report
                              StatusName=Wico Craft Status
                              LongStatus=Wico Craft Log
                              RangeReport=[RANGE]
                              SledReport=[SMREPORT]
                              GPSTag=[GPS]

                              [CONNECTORS]
                              BaseConnector=[BASE]
                              DockConnector=[DOCK]

                              [CAMERAS]
                              CameraViewOnly=[VIEW]

                              [NAV]
                              DTMDebug=False
                              CameraCollision=False
                              SensorCollision=True
                              NAVEmulateOld=True
                              NAVGravityMinElevation=-1

                              [WICO CRAFT]
                              EchoOn=True

                            </Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB Wico Craft NAV</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>
                /* Wico Craft NAV Control sub-module
                *
                * Commands:
                * XXX
                *
                *
                *
                * Handles MODES:
                * MODE_DOCKED
                * MODE_LAUNCH
                * MODE_RELAUNCH
                * MODE_SLEDMOVE
                * MODE_ARRIVEDTARGET
                *
                *
                *
                * 2.0.4 Upate to new save format
                *  .04A Camera Scans for Obstacles...!!!one
                *
                *  2.1 Use new blockInint and localgrids
                *
                *  .1g Add Docked
                *  copy from SLED PATROL
                *  .1h fixed yaw only gyromain
                *  .1i tested in space. Added !NAV to gyro check
                *  .1j add doroll
                *  .1k use (and fix/test) IMyGyroControl
                2.2: Update for 1.72

                2.9 Copy from Sled Dock 2.2

                Needs LOTS of updates.

                3.0 Move code into 3.0

                3.0A Start NAV processing: W and O
                3.0B Add D, S, C
                3.0C Add arrivedtarget

                3.0D 110517  search order for text panels

                3.1 Version for PB Updates SE 1.185
                o Added support for GPS-formatted nav locations
                Ex:  W GPS:Wicorel #1:53970.01:128270.31:-123354.92:

                3.1a
                remove blockApplyActions() and make routines for each block type that needs it

                3.2 Collision Avoidance from Docking module for thruster travel

                Added Rotors

                3.2A travelmovement calculating target speeds and distances with more precision

                3.2B Sled Testing

                3.2C INI Save
                fix bug in serialize wrting z,y z, instead of x,y,z (oops)

                3.2D INI WCCM 01062018

                3.2E Major INI settings

                3.3 Lists of text panels
                Only output to textpanels and end of run

                3.3A Redo Serialize

                3.4 Sled testing
                (EFM Update 8 Drones)

                3.4a Save NAV settings so nav can properly resume
                (EFM Update 9 Drones)

                3.4B

                3.4C AvionicsGyro fixes
                Fix for bug in SE wheel setter for friction
                Add Gyro limits to CustomData

                * TODO:
                */
                string a="Wico Craft";string b="NAV";string c="3.4C";const string d="0.00";void e(ob f){gh(f);}void g(ob
                f){gg(f);}void h(){}void i(){iC();}void j(bool k=false){jL(iE);oa();gu(gj);gu(gk);if(nA is IMyRemoteControl)
                ((IMyRemoteControl)nA).SetAutoPilotEnabled(false);if(nA is IMyShipController)((IMyShipController)nA).DampenersOverride
                =true;}m l=new m();class m{public const Base6Directions.Direction n=Base6Directions.Direction.Forward;
                public const Base6Directions.Direction o=Base6Directions.Direction.Backward;public const Base6Directions.Direction
                p=Base6Directions.Direction.Left;public const Base6Directions.Direction q=Base6Directions.Direction.Right;
                public const Base6Directions.Direction Up=Base6Directions.Direction.Up;public const Base6Directions.Direction
                r=Base6Directions.Direction.Down;public float s=30.0f;public List&lt;IMyGyro&gt;t=new List&lt;IMyGyro&gt;();Base6Directions.Direction
                u=Up;Base6Directions.Direction v=p;Base6Directions.Direction w=n;Base6Directions.Direction x=Up;Base6Directions.Direction
                y=p;Base6Directions.Direction z=n;public void A(List&lt;IMyTerminalBlock&gt;B){t=B.ConvertAll(x=&gt;(IMyGyro)x);
                if(t.Count&gt;0)s=t[0].GetMaximum&lt;float&gt;("Yaw");}public void A(List&lt;IMyGyro&gt;B){t.Clear();if(B==null)return;
                t=B;if(t.Count&gt;0)s=t[0].GetMaximum&lt;float&gt;("Yaw");}public void A(IMyProgrammableBlock PB,IMyGridTerminalSystem
                C){t.Clear();if((C!=null)&amp;&amp;(PB!=null))C.GetBlocksOfType&lt;IMyGyro&gt;(t,x=&gt;((x.CubeGrid==PB.CubeGrid)&amp;&amp;x.IsFunctional));
                if(t.Count&gt;0)s=t[0].GetMaximum&lt;float&gt;("Yaw");}public void D(IMyTerminalBlock E,Base6Directions.Direction
                F=n,Base6Directions.Direction G=Up){if(Base6Directions.GetAxis(F)==Base6Directions.GetAxis(G))G=Base6Directions.GetPerpendicular(F);
                if(E==null){}else{Vector3 H=Base6Directions.GetVector(F);Vector3.TransformNormal(ref H,E.Orientation,
                out H);F=Base6Directions.GetDirection(ref H);H=Base6Directions.GetVector(G);Vector3.TransformNormal(ref
                H,E.Orientation,out H);G=Base6Directions.GetDirection(ref H);}x=G;z=F;y=Base6Directions.GetLeft(x,z);
                }public void I(bool J){for(int i=0;i&lt;t.Count;i++){t[i].GyroOverride=J;}}public void I(int K,bool J){
                if(K&lt;t.Count){t[K].GyroOverride=J;}}public void L(float M){for(int i=0;i&lt;t.Count;i++){t[i].GyroPower
                =M;}}public void L(int K,float M){if(K&lt;t.Count){t[K].GyroPower=M;}}public void N(bool O){for(int i=0;
                i&lt;t.Count;i++){t[i].Enabled=O;}}public void N(int K,bool O){if(K&lt;t.Count){t[K].Enabled=O;}}public void
                P(bool Q){for(int i=0;i&lt;t.Count;i++){t[i].ShowOnHUD=Q;}}public void P(int K,bool Q){if(K&lt;t.Count){t[K].ShowOnHUD
                =Q;}}void R(Base6Directions.Direction S,out string T,out float U){T="Yaw";U=-1.0f;if(Base6Directions.GetAxis(u)
                ==Base6Directions.GetAxis(S)){if(u==S)U=1.0f;}if(Base6Directions.GetAxis(v)==Base6Directions.GetAxis(S))
                {T="Pitch";if(v==S)U=1.0f;}if(Base6Directions.GetAxis(w)==Base6Directions.GetAxis(S)){T="Roll";if(w==
                S){}else U=1.0f;}}public void V(IMyGyro K,string T,float J){if(T=="Yaw"){K.Yaw=J;}else if(T=="Pitch")
                {K.Pitch=J;}else{K.Roll=J;}}public void W(float X){for(int i=0;i&lt;t.Count;i++){string T;float U;Vector3
                H=Base6Directions.GetVector(Up);Vector3.TransformNormal(ref H,t[i].Orientation,out H);u=Base6Directions.GetDirection(ref
                H);R(x,out T,out U);V(t[i],T,U*X);}}public void Y(float Z){for(int i=0;i&lt;t.Count;i++){string T;float
                U;Vector3 H=Base6Directions.GetVector(p);Vector3.TransformNormal(ref H,t[i].Orientation,out H);v=Base6Directions.GetDirection(ref
                H);R(y,out T,out U);V(t[i],T,U*Z);}}public void ba(float bb){for(int i=0;i&lt;t.Count;i++){string T;float
                U;Vector3 H=Base6Directions.GetVector(n);Vector3.TransformNormal(ref H,t[i].Orientation,out H);w=Base6Directions.GetDirection(ref
                H);R(z,out T,out U);V(t[i],T,U*bb);}}public void bc(float X,float Z,float bb){for(int i=0;i&lt;t.Count;
                i++){string T;float U;Vector3 H=Base6Directions.GetVector(n);Vector3.TransformNormal(ref H,t[i].Orientation,
                out H);w=Base6Directions.GetDirection(ref H);H=Base6Directions.GetVector(p);Vector3.TransformNormal(ref
                H,t[i].Orientation,out H);v=Base6Directions.GetDirection(ref H);H=Base6Directions.GetVector(Up);Vector3.TransformNormal(ref
                H,t[i].Orientation,out H);u=Base6Directions.GetDirection(ref H);R(x,out T,out U);V(t[i],T,U*X);R(y,out
                T,out U);V(t[i],T,U*Z);R(z,out T,out U);V(t[i],T,U*bb);}}}double bd(Vector3D be,IMyTerminalBlock bf)
                {double bg=0;bool bh=false;MatrixD bi=by(bf);Vector3D bj=bf.GetPosition();Vector3D bk=bj+1.0*Vector3D.Normalize(bi.Backward);
                Vector3D bl=bj+1.0*Vector3D.Normalize(bi.Right);Vector3D bm=bj-1.0*Vector3D.Normalize(bi.Right);double
                bn=bs(bl,be);double bo=bs(bm,be);double bp=bs(bl,bm);double bq=Vector3D.DistanceSquared(bj,be);double
                br=Vector3D.DistanceSquared(bk,be);bh=bq&lt;br;bg=(bo-bn)/bp;Echo("calc Angle="+Math.Round(bg,5));if(!bh)
                {bg+=(bg&lt;0)?-1:1;}return bg;}double bs(Vector3D a,Vector3D b){return Vector3D.Distance(a,b);}MatrixD
                bt(IMyCubeGrid bu){Vector3D bv=bu.GridIntegerToWorld(new Vector3I(0,0,0));Vector3D bw=bu.GridIntegerToWorld(new
                Vector3I(0,1,0))-bv;Vector3D bx=bu.GridIntegerToWorld(new Vector3I(0,0,1))-bv;return MatrixD.CreateScale(bu.GridSize)
                *MatrixD.CreateWorld(bv,-bx,bw);}MatrixD by(IMyCubeBlock blk){Matrix bA;blk.Orientation.GetMatrix(out
                bA);return bA*MatrixD.CreateTranslation(((Vector3D)new Vector3D(blk.Min+blk.Max))/2.0)*bt(blk.CubeGrid);
                }bool bB(double bC,string bD="Roll",float bE=-1,float bF=1f){float bG=0;IMyGyro K=nJ[0]as IMyGyro;float
                bH=K.GetMaximum&lt;float&gt;(bD);if(bE&gt;0)bH=bE;if(Math.Abs(bC)&gt;1.0){bG=bH*(float)(bC)*bF;}else if(Math.Abs(bC)
                &gt;.7){bG=bH*(float)(bC)/4;}else if(Math.Abs(bC)&gt;0.5){bG=0.11f*Math.Sign(bC);}else if(Math.Abs(bC)&gt;0.1)
                {bG=0.11f*Math.Sign(bC);}else if(Math.Abs(bC)&gt;0.01){bG=0.11f*Math.Sign(bC);}else if(Math.Abs(bC)&gt;0.001)
                {bG=0.09f*Math.Sign(bC);}else bG=0;l.W(bG);if(Math.Abs(bC)&lt;nK){l.I(false);}else{l.I(true);l.N(true);
                return false;}return true;}void bI(List&lt;IMyTerminalBlock&gt;bJ,bool bK=true){foreach(var b in bJ){IMyFunctionalBlock
                f=b as IMyFunctionalBlock;if(f==null)continue;f.Enabled=bK;}}void bL(List&lt;IMyTerminalBlock&gt;bJ){foreach
                (var b in bJ){IMyFunctionalBlock f=b as IMyFunctionalBlock;if(f==null)continue;f.Enabled=!f.Enabled;
                }}string bM="[VIEW]";Matrix bN=new Matrix(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);List&lt;IMyTerminalBlock&gt;bO=
                new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;bP=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                bQ=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;bR=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                bS=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;bT=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                bU=new List&lt;IMyTerminalBlock&gt;();IMyTerminalBlock bV=null;private MyDetectedEntityInfo bW;string bX="CAMERAS";
                void bY(ob f){f.oC(bX,"CameraViewOnly",ref bM,true);}bool bZ(List&lt;IMyTerminalBlock&gt;ca,double cb=100,
                float Z=0,float X=0){double cc=0;bV=null;for(int i=0;i&lt;ca.Count;i++){double cd=((IMyCameraBlock)ca[i]).AvailableScanRange;
                if(cd&gt;cc){cc=cd;bV=ca[i];}}var ce=bV as IMyCameraBlock;if(bV==null){return false;}if(ce.CanScan(cb))
                {bW=ce.Raycast(cb,Z,X);bV=ce;if(!bW.IsEmpty())dt(bW);return true;}else{}return false;}bool bZ(List&lt;IMyTerminalBlock&gt;
                ca,Vector3D cf){double cc=0;bV=null;for(int i=0;i&lt;ca.Count;i++){double cd=((IMyCameraBlock)ca[i]).AvailableScanRange;
                if(cd&gt;cc){cc=cd;bV=ca[i];}}var ce=bV as IMyCameraBlock;if(bV==null)return false;{bW=ce.Raycast(cf);bV
                =ce;if(!bW.IsEmpty())dt(bW);return true;}}double cg(List&lt;IMyTerminalBlock&gt;ca){double ch=0;for(int i=
                0;i&lt;ca.Count;i++){IMyCameraBlock ce=ca[i]as IMyCameraBlock;if(ch&lt;ce.AvailableScanRange)ch=ce.AvailableScanRange;
                }return ch;}string ci(IMyTerminalBlock cj){bO.Clear();bP.Clear();bQ.Clear();bR.Clear();bS.Clear();bT.Clear();
                bU.Clear();if(cj==null)return"\nCameras:No OrientationBlock";GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt;(bU,
                (x1=&gt;x1.CubeGrid==Me.CubeGrid));Matrix ck;cj.Orientation.GetMatrix(out ck);Matrix.Transpose(ref ck,out
                ck);for(int i=0;i&lt;bU.Count;++i){if(bU[i].CustomName.Contains(bM))continue;IMyCameraBlock ce=bU[i]as IMyCameraBlock;
                ce.EnableRaycast=true;Matrix cl;ce.Orientation.GetMatrix(out cl);Vector3 cm=Vector3.Transform(cl.Forward,
                ck);if(cm==bN.Left){bS.Add(bU[i]);}else if(cm==bN.Right){bT.Add(bU[i]);}else if(cm==bN.Backward){bP.Add(bU[i]);
                }else if(cm==bN.Forward){bO.Add(bU[i]);}else if(cm==bN.Up){bR.Add(bU[i]);}else if(cm==bN.Down){bQ.Add(bU[i]);
                }}string s;s="CS:&lt;";s+="F"+bO.Count.ToString("00");s+="B"+bP.Count.ToString("00");s+="D"+bQ.Count.ToString("00");
                s+="U"+bR.Count.ToString("00");s+="L"+bS.Count.ToString("00");s+="R"+bT.Count.ToString("00");s+="&gt;";
                return s;}void cn(List&lt;IMyTerminalBlock&gt;ca,string co){string cp;for(int i=0;i&lt;ca.Count;i++){if(!ca[i].CustomName.Contains(co))
                {cp="Camera ";if(ca.Count&gt;1)cp+=(i+1).ToString()+" ";cp+=co;ca[i].CustomName=cp;}}}List&lt;IMyTerminalBlock&gt;
                cq=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;cr=new List&lt;IMyTerminalBlock&gt;();string cs(IMyTerminalBlock
                cj){string s="";if(bU.Count&lt;1)s+=ci(cj);cq.Clear();cr.Clear();foreach(var camera in bQ){if(camera.CustomName.ToLower().Contains("fore")
                ||camera.CustomData.ToLower().Contains("fore"))cq.Add(camera);else if(camera.CustomName.ToLower().Contains("aft")
                ||camera.CustomData.ToLower().Contains("aft"))cr.Add(camera);}s+="HCS:&lt;";s+="F"+cq.Count.ToString("00");
                s+="A"+cr.Count.ToString("00");s+="&gt;";return s;}public class ct{bool cu=false;Program cv;public double
                cw=1250;double cx=5000;float cy=25f;float cz=25f;double cA=5;float cB=3;float cC=0.5f;float cD=0;float
                cE=0;float cF=0;float cG=0;List&lt;IMyTerminalBlock&gt;cH=new List&lt;IMyTerminalBlock&gt;();private int cI=0;private
                int cJ=1;public MyDetectedEntityInfo bW;public List&lt;MyDetectedEntityInfo&gt;cK=new List&lt;MyDetectedEntityInfo&gt;();
                public IMyTerminalBlock bV=null;public ct(Program pg,List&lt;IMyTerminalBlock&gt;bJ,double cL=1250,float cM
                =45f,float cN=45f,float cO=2,float cP=1,float cQ=0.5f,double cR=5000){cv=pg;cu=false;cH.Clear();cK.Clear();
                bW=new MyDetectedEntityInfo();foreach(var b in bJ){if(b is IMyCameraBlock){cH.Add(b);IMyCameraBlock c
                =b as IMyCameraBlock;c.EnableRaycast=true;if(cy&gt;c.RaycastConeLimit)cy=c.RaycastConeLimit;if(cz&gt;c.RaycastConeLimit)
                cz=c.RaycastConeLimit;}}if(cL&gt;cR)cR=cL;cw=cL;cy=cM;cz=cN;cA=cO;cB=cP;cC=cQ;cx=cR;cD=0;cE=0;cF=0;cG=0;
                cI=0;cJ=cH.Count;}public bool cS(){return cu;}void cT(MyDetectedEntityInfo bW){bool cU=true;for(int i
                =0;i&lt;cK.Count;i++){if(cK[i].EntityId==bW.EntityId)cU=false;}if(cU){cK.Add(bW);}}public bool cV(){if(cH.Count
                &lt;1)cu=true;if(cu)return false;bool cW=false;for(int cX=0;cX&lt;cJ;cX++){if(cv.bZ(cH,cw,cG,cF)){bW=cv.bW;
                if(!bW.IsEmpty()){bool cY=true;if((bW.Type==MyDetectedEntityType.LargeGrid)||(bW.Type==MyDetectedEntityType.SmallGrid))
                {if(cv.nm(bW.EntityId)){cY=false;}}if(cY){cv.eW+="\nDoScan HIT!";cT(bW);cW=true;}}cI++;if(cG==0&amp;&amp;cF==
                0){cD=cC;cE=cC;cI=0;}if(cI&gt;3){cI=0;cE+=Math.Abs(cE/cB)+cC;if(Math.Abs(cE)&gt;cy){cI=0;cE=0;cD+=Math.Abs(cD
                /cB)+cC;}if(Math.Abs(cD)&gt;cz){cD=0;cE=0;cI=0;{cw*=cA;if(cw&gt;cx){cu=true;return false;}}}}switch(cI){case
                0:cG=cD;cF=cE;break;case 1:cG=-cD;cF=cE;break;case 2:cG=cD;cF=-cE;break;case 3:cG=-cD;cF=-cE;break;}
                }}return cW;}}const int cZ=0;const int da=2;const int db=4;const int dc=32;const int dd=64;const int
                de=128;const int df=256;const int dg=512;const int dh=1024;const int di=2048;const int dj=0xfff;string
                dk(){string dl="FLAGS:";if((hC&amp;da)&gt;0)dl+="SLED ";if((hC&amp;dc)&gt;0)dl+="ORBITAL ";if((hC&amp;dd)&gt;0)dl+="ROCKET ";
                if((hC&amp;db)&gt;0)dl+="ROTOR ";if((hC&amp;de)&gt;0)dl+="PET ";if((hC&amp;df)&gt;0)dl+="NAD ";if((hC&amp;dg)&gt;0)dl+="NO Gyro ";
                if((hC&amp;di)&gt;0)dl+="No Tank ";if((hC&amp;dh)&gt;0)dl+="No Power ";return dl;}long dm=0;void dn(){string@do;if
                (SaveFile==null){@do=Storage;}else{@do=SaveFile.GetPublicText();}if(hz==null)return;hz.on(@do);hz.oC(hw,
                "SaveID",ref dm);if(dp())hz.on("");e(hz);hz.oC(hw,"Mode",ref fb,true);hz.oC(hw,"current_state",ref current_state,
                true);hz.oC(hw,"PassedArgument",ref sPassedArgument,true);hz.oC(hw,"AlertStates",ref hE,true);hz.oC(hw,
                "craft_operation",ref hC,true);hz.oC(hw,"PassedArgument",ref sPassedArgument);hz.oC(hw,"ReceivedMessage",
                ref hF);}bool dp(){if(SaveFile==null)return false;if(dm==(long)SaveFile.EntityId)return false;else return
                true;}bool dq(string dr){dr=dr.Trim().ToLower();return(dr=="True"||dr=="true");}Dictionary&lt;long,MyDetectedEntityInfo&gt;
                ds=new Dictionary&lt;long,MyDetectedEntityInfo&gt;();void dt(MyDetectedEntityInfo thisDetectedInfo){if(thisDetectedInfo.EntityId
                !=0){if(!ds.ContainsKey(thisDetectedInfo.EntityId)){ds.Add(thisDetectedInfo.EntityId,thisDetectedInfo);
                }else{ds[thisDetectedInfo.EntityId]=thisDetectedInfo;}}else Echo("Not adding: Zero Entity");}string dv(MyDetectedEntityInfo
                dw){string s="";s+="ETBV";s+=":"+dw.EntityId.ToString();s+=":"+dw.TimeStamp;Vector3D dx=dw.BoundingBox.Min;
                s+=":"+hI(dx);Vector3D dy=dw.BoundingBox.Max;s+=":"+hI(dy);Vector3D dz=(Vector3)dw.Velocity;s+=":"+hI(dz);
                return s;}void dA(){Echo("mode="+fb.ToString());if(fb==fi){dG();return;}}void dB(){es(DateTime.Now.ToString()
                +" ACTION: Reset To Idle",ea,true);j();fS(fc);}void dC(){es(b+" Manual Control",ec);}bool dD=true;bool
                dE=false;bool dF=false;void dG(){es("clear",ec);es(b+":Going Target!",ec);es(b+":GT: current_state="
                +current_state.ToString(),ec);Echo("Going Target: state="+current_state.ToString());if(current_state
                ==0){kN();if((hC&amp;da)&gt;0){dE=true;if(fX&gt;45)fX=45;}else dE=false;if((hC&amp;db)&gt;0){dF=true;if(fX&gt;15)fX=15;}
                else dF=false;l.D(nA);double dH=0;((IMyShipController)nA).TryGetPlanetElevation(MyPlanetElevation.Surface,
                out dH);if(fV){if(dH&gt;hL.ie()){current_state=150;}else current_state=160;}else fS(ff);iu=true;}else if
                (current_state==150){if(iy&gt;0){double dH=0;((IMyShipController)nA).TryGetPlanetElevation(MyPlanetElevation.Surface,
                out dH);float dI=nK;nK=0.1f;bool dJ=GyroMain("");Echo("bAligned="+dJ.ToString());nK=dI;if(dJ||dH&lt;hL.ie()
                *2){current_state=160;}iu=true;}else current_state=160;}else if(current_state==160){Echo("Moving to Target");
                Vector3D dK=fU;Vector3D dL=dK-nA.GetPosition();double dM=dL.Length();Echo("distance="+eQ(dM));Echo("velocity="
                +ix.ToString("0.00"));es("clear",eg);es("Moving to Target\nD:"+eQ(dM)+" V:"+ix.ToString(d),eg);if(dD
                &amp;&amp;(dM&lt;fY)){Echo("we have arrived");if(gc){var dN=nv&lt;IMyTerminalBlock&gt;("NAV:");for(int i1=0;i1&lt;dN.Count();
                i1++){if(dN[i1].CustomName.StartsWith("NAV:")){Echo("Found NAV: command:");dN[i1].CustomName="NAV: C Arrived Target";
                }}}j();fV=false;fS(fF);return;}bool dO=true;double dH=0;((IMyShipController)nA).TryGetPlanetElevation(MyPlanetElevation.Surface,
                out dH);Echo("Elevation="+dH.ToString("0.0"));Echo("MinEle="+gd.ToString("0.0"));if(!dE&amp;&amp;!dF&amp;&amp;gd&gt;0&amp;&amp;
                dH&lt;gd){jH(iI,100);}if(dO){Echo("Do Travel");kS(dK,3.0f,200,170);}}else if(current_state==170){iu=true;
                Vector3D dK=fU;kN();lj(dK);current_state=172;}else if(current_state==171){iu=false;}else if(current_state
                ==172){Echo("Collision Avoid");es("clear",eg);es("Collision Avoid",eg);kS(li,5.0f,160,173);}else if(current_state
                ==173){if(bW.Type==MyDetectedEntityType.Asteroid||bW.Type==MyDetectedEntityType.LargeGrid||bW.Type==
                MyDetectedEntityType.SmallGrid){current_state=174;}else current_state=170;iu=true;}else if(current_state
                ==174){lC();kN();dtNavStartShip=DateTime.Now;current_state=175;iu=true;}else if(current_state==175){
                DateTime dP=dtNavStartShip.AddSeconds(5.0f);DateTime dQ=DateTime.Now;if(DateTime.Compare(dQ,dP)&gt;0){fS(ff);
                kj();return;}if(lD()){Echo("ESCAPE!");current_state=180;}bWantMedium=true;}else if(current_state==180)
                {kS(li,1f,160,173);}else if(current_state==200){es("clear",eg);es("Arrived at Target",eg);j();fV=false;
                ma(false);pl();fS(fF);if(gc){var dN=nv&lt;IMyTerminalBlock&gt;("NAV:");for(int i1=0;i1&lt;dN.Count();i1++){if
                (dN[i1].CustomName.StartsWith("NAV:")){Echo("Found NAV: command:");dN[i1].CustomName="NAV: C Arrived Target";
                }}}iu=true;kj();}}void dR(float dS){if(dF){gm(dS);}else jH(iF,dS);}void dT(){jL(iE);gu();}string dU=
                "LOGGING";void dV(ob f){f.oC(dU,"TextPanelReport",ref sTextPanelReport,true);f.oC(dU,"StatusName",ref
                dZ,true);f.oC(dU,"LongStatus",ref eb,true);f.oC(dU,"RangeReport",ref dX,true);f.oC(dU,"SledReport",ref
                ssledReport,true);f.oC(dU,"GPSTag",ref ef,true);}ek dW=null;string dX="[RANGE]";ek dY=null;string dZ
                ="Wico Craft Status";ek ea=null;string eb="Wico Craft Log";ek ec=null;string sTextPanelReport="Craft Report";
                ek ee=null;string ef="[GPS]";ek eg=null;string ssledReport="[SMREPORT]";bool ei=false;bool ej=false;
                public class ek{Program cv;string el="";List&lt;IMyTextPanel&gt;em=new List&lt;IMyTextPanel&gt;();string en="";string
                eo="";bool ep=false;bool eq=true;public ek(Program pg,string cp,bool er=false){cv=pg;el=cp;ep=er;eq=
                true;en="";eo="";em.Clear();em=cv.nx(el);if(em.Count&lt;1)em=cv.nw(el);}public void es(string et,bool eu
                =false){if(et=="clear"){en="";eo="X";eq=false;return;}if(ep&amp;&amp;eq){eq=false;if(em.Count&gt;0){en=em[0].GetPublicText();
                eo="X";}}if(eu){en=et+"\n"+en;}else en+=et+"\n";}public void ev(){if(eo!=en){eq=true;foreach(var t in
                em){t.WritePublicText(en);}eo=en;}}}void ew(){dY=eB(true);ea=ey(eb,true);;ec=ey(sTextPanelReport);dW
                =ey(dX);ee=ey(ef,ij);eg=ey(ssledReport);ei=true;}void ex(){if(dY!=null)dY.ev();if(ea!=null)ea.ev();if
                (ec!=null)ec.ev();if(dW!=null)dW.ev();if(ee!=null)ee.ev();if(eg!=null)eg.ev();}ek ey(string stheName,
                bool bRefresh=false){ek eA=new ek(this,stheName,bRefresh);return eA;}ek eB(bool force_update=false){
                if((dY!=null||ei)&amp;&amp;!force_update)return dY;dY=ey(dZ);return dY;}void es(string text,ek wLog,bool bReverse
                =false){if(wLog==null)return;wLog.es(text,bReverse);}void eE(string et){es(et,eB());if(ej&amp;&amp;et!="clear")
                Echo(et);}string eF(double eG){int eH=75;if(eG&lt;0)eG=0;int eI=(int)(eG*eH)/100;if(eI&gt;eH)eI=eH;string dl
                ="["+new String('|',eI)+new String('\'',eH-eI)+"]";return dl;}void eJ(string cp,Vector3D eK){string s1;
                s1="GPS:"+cp+":"+hI(eK)+":";es(s1,ee);}string eL(string eM,string eN){string s;int eO=eM.Length;int eP
                =eN.Length;if(eO+eP&gt;32){if(eP&gt;31)return"INVALID";eO=32-eP;}s=eM.Substring(0,eO)+eN;s.Replace(":","_");
                s.Replace(";","_");return s;}string eQ(double thed){string eS="";if(thed&gt;1000){eS=thed.ToString("N0")
                +"km";}else if(thed&gt;10){eS=thed.ToString("0.0")+"m";}else{eS=thed.ToString("0.000")+"m";}return eS;}
                void eT(){}void eU(ob eV){mv(eV);jc(eV);nE(eV);bY(eV);NavInitCustomData(eV);}string eW="";string eX=
                "";int eY=0;string eZ(){nG=1;nK=0.09f;nF=0.75;Echo("Init:"+eY);if(eY==0){es(DateTime.Now.ToString()+
                a+":"+b+":INIT",ea,true);eW+=SerializeInit();dn();eW+=mX();eW+=DefaultOrientationBlockInit();ew();}else
                if(eY==1){eW+=jd(nA);eW+=gl();eW+=pH(nA);eW+=pg();eW+=ci(nA);eW+=mw();}else if(eY==2){eW+=nY();l.A(nJ);
                l.D(nA);eW+=oY();eW+=ci(nA);gx(nA);initShipDim(nA);eW+=fa();@is=true;}eY++;if(@is){eY=0;}eE(eW);return
                eW;}string fa(){return"&gt;";}int fb=0;const int fc=0;const int fd=1;const int fe=2;const int ff=3;const
                int fg=4;const int fh=5;const int fi=7;const int fj=8;const int fk=9;const int fl=13;const int fm=10;
                const int fn=11;const int fo=12;const int fp=14;const int fq=15;const int fr=16;const int fs=17;const
                int ft=18;const int fu=19;const int fv=20;const int fw=21;const int fx=22;const int fy=23;const int fz
                =24;const int fA=25;const int fB=26;const int fC=27;const int fD=28;const int fE=29;const int fF=30;
                const int fG=31;const int fH=50;const int fI=60;const int fJ=111;const int fK=200;const int fL=210;const
                int fM=220;const int fN=290;const int fO=400;const int fP=410;const int fQ=500;const int fR=510;void
                fS(int newMode){if(fb==newMode)return;fb=newMode;current_state=0;kj();}Vector3D fU;bool fV=false;DateTime
                dtNavStartShip;double fX=100;double fY=50;bool fZ=false;bool ga=true;bool gb=true;bool gc=true;float
                gd=-1;string sNavSection="NAV";void NavInitCustomData(ob f){f.oC(sNavSection,"DTMDebug",ref fZ,true);
                f.oC(sNavSection,"CameraCollision",ref ga,true);f.oC(sNavSection,"SensorCollision",ref gb,true);f.oC(sNavSection,
                "NAVEmulateOld",ref gc,true);f.oC(sNavSection,"NAVGravityMinElevation",ref gd,true);}void gg(ob f){f.oP(sNavSection,
                "vTarget",fU);f.oP(sNavSection,"ValidNavTarget",fV);f.oP(sNavSection,"dStartShip",dtNavStartShip);f.oP(sNavSection,
                "shipSpeedMax",fX);f.oP(sNavSection,"arrivalDistanceMin",fY);}void gh(ob f){f.oC(sNavSection,"vTarget",
                ref fU,true);f.oC(sNavSection,"ValidNavTarget",ref fV,true);f.oC(sNavSection,"dStartShip",ref dtNavStartShip,
                true);f.oC(sNavSection,"shipSpeedMax",ref fX,true);f.oC(sNavSection,"arrivalDistanceMin",ref fY,true);
                }List&lt;IMyTerminalBlock&gt;gi=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;gj=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;gk=new List&lt;IMyTerminalBlock&gt;();string gl(){gi.Clear();gj.Clear();gk.Clear();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(gi,
                nl);for(int i=0;i&lt;gi.Count;i++){if(gi[i].CustomName.Contains("[LEFT]")||gi[i].CustomData.Contains("[LEFT]"))
                {gj.Add(gi[i]);}else if(gi[i].CustomName.Contains("[RIGHT]")||gi[i].CustomData.Contains("[RIGHT]")){
                gk.Add(gi[i]);}}return"NR:L"+gj.Count.ToString("0")+"R"+gk.Count.ToString("0");}bool gm(float gn){if
                (gj.Count&lt;1)return false;float go=gj[0].GetMaximum&lt;float&gt;("Velocity");var gp=gj[0]as IMyMotorStator;
                float gq=gp.TargetVelocityRPM;float gr=(gq/go*100);gr=Math.Abs(gr);if(gn&gt;(gr+5f))gn=gr+5;if(gn&lt;(gr-5))
                gn=gr-5;if(gn&lt;0f)gn=0f;if(gn&gt;100f)gn=100f;if(Math.Abs(gn)&gt;0){gm(gj,-gn);gm(gk,gn);return true;}else return
                false;}bool gm(List&lt;IMyTerminalBlock&gt;rotorList,float gn){for(int i=0;i&lt;rotorList.Count;i++){var gp=rotorList[i]
                as IMyMotorStator;float go=gp.GetMaximum&lt;float&gt;("Velocity");if(!gp.Enabled)gp.Enabled=true;float gt=
                go*(gn/100.0f);gp.TargetVelocityRPM=gt;}return true;}bool gu(){gu(gj);gu(gk);return true;}bool gu(List&lt;IMyTerminalBlock&gt;
                rotorList){for(int i=0;i&lt;rotorList.Count;i++){IMyMotorStator gp=rotorList[i]as IMyMotorStator;gp.TargetVelocityRPM
                =0;}return true;}bool gv(double bg){float gn;if(Math.Abs(bg)&gt;1.0){gn=50;}else if(Math.Abs(bg)&gt;.7){gn
                =50;}else if(Math.Abs(bg)&gt;0.5){gn=30;}else if(Math.Abs(bg)&gt;0.1){gn=20;}else if(Math.Abs(bg)&gt;0.01){gn
                =5;}else if(Math.Abs(bg)&gt;0.001){gn=0;}else gn=0;gn/=3;gn=gn*-Math.Sign(bg);if(Math.Abs(gn)&gt;0){gm(gj,
                gn);}if(Math.Abs(gn)&gt;0){gm(gk,gn);}if(Math.Abs(gn)&gt;0)return false;else return true;}public gz gw;void
                gx(IMyTerminalBlock sourceBlock=null){if(sourceBlock==null)sourceBlock=nA;gw=new gz(sourceBlock);}public
                struct gz{public Vector3D[]gA;Vector3D gB;Vector3D gC;public Vector3D gD;static int[]gE={1,3,5,7};static
                int[]gF={0,2,4,6};static int[]gG={2,3,6,7};static int[]gH={0,1,4,5};static int[]gI={4,5,6,7};static int[]
                gJ={0,1,2,3};static int[][]gK={gE,gF,gG,gH,gI,gJ};public const int gL=0;public const int gM=1;public
                const int gN=2;public const int gO=3;public const int gP=4;public const int gQ=5;public gz(IMyTerminalBlock
                gR){gA=new Vector3D[8];gC=new Vector3D(gR.CubeGrid.Min)-new Vector3D(0.5,0.5,0.5);gC*=gR.CubeGrid.GridSize;
                gB=new Vector3D(gR.CubeGrid.Max)+new Vector3D(0.5,0.5,0.5);gB*=gR.CubeGrid.GridSize;var gS=gR.WorldMatrix.GetOrientation();
                var gT=gR.CubeGrid.WorldMatrix.GetOrientation()*MatrixD.Transpose(gS);Vector3D.TransformNormal(ref gC,
                ref gT,out gC);Vector3D.TransformNormal(ref gB,ref gT,out gB);var gU=Vector3D.Min(gC,gB);gB=Vector3D.Max(gC,
                gB);gC=gU;var gV=gR.CubeGrid.GetPosition();Vector3D gW;Vector3D gX;gW=gC;Vector3D.TransformNormal(ref
                gW,ref gS,out gW);gW+=gV;gX=gB;Vector3D.TransformNormal(ref gX,ref gS,out gX);gX+=gV;BoundingBox bb=
                new BoundingBox(gW,gX);gD=bb.Center;Vector3D gY;for(int i=0;i&lt;8;i++){gY.X=((i&amp;1)==0?gC:gB).X;gY.Y=((i
                &amp;2)==0?gC:gB).Y;gY.Z=((i&amp;4)==0?gC:gB).Z;Vector3D.TransformNormal(ref gY,ref gS,out gY);gY+=gV;gA[i]=
                gY;}}public void gZ(int ha,Vector3D[]hb,int hc=0){ha%=gK.Length;for(int i=0;i&lt;gK[ha].Length;i++){hb[hc++]
                =gA[gK[ha][i]];}}}bool hd(string he){eX="";if(he==""||he=="timer"||he=="wccs"||he=="wcct"){if(sPassedArgument
                !=""&amp;&amp;sPassedArgument!="timer"){he=sPassedArgument;}if(gc){var dN=nv&lt;IMyTerminalBlock&gt;("NAV:");for(int
                i1=0;i1&lt;dN.Count();i1++){if(dN[i1].CustomName.StartsWith("NAV:")){Echo("Found NAV: command:");he=dN[i1].CustomName.Substring("NAV:".Length);
                break;}}}}if(he=="init"){eW="";@is=false;eY=0;eZ();return false;}string[]hf=he.Trim().Split(';');for
                (int hg=0;hg&lt;hf.Length;hg++){string[]hh=hf[hg].Trim().Split(' ');if(hh[0]=="timer"){}else if(hh[0]==
                "wccs"){}else if(hh[0]=="wcct"){}else if(hh[0]=="W"||hh[0]=="O"){Echo("Args:");for(int hi=0;hi&lt;hh.Length;
                hi++)Echo(hh[hi]);if(hh.Length&lt;1){Echo("Invalid Command:("+hf[hg]+")");continue;}string hj=hh[1].Trim();
                if(hh.Length&gt;2){hj=hh[1];for(int kk=2;kk&lt;hh.Length;kk++)hj+=" "+hh[kk];hj=hj.Trim();}string[]hk=hj.Split(',');
                if(hk.Length&lt;3){hk=hj.Split(':');}for(int hi=0;hi&lt;hk.Length;hi++)Echo(hk[hi]);if(hk.Length&lt;3){Echo("Invalid Command:("
                +hf[hg]+")");oa();return false;}int hl=0;string hm="Waypoint";if(hk[0]=="GPS"){if(hk.Length&gt;4){hm=hk[1];
                hl=2;}else{Echo("Invalid Command");oa();return false;}}double x,y,z;bool hn=double.TryParse(hk[hl++].Trim(),
                out x);bool ho=double.TryParse(hk[hl++].Trim(),out y);bool hp=double.TryParse(hk[hl++].Trim(),out z);
                if(!hn||!ho||!hp){Echo("Invalid Command:("+hf[hg]+")");continue;}fU=new Vector3D(x,y,z);fV=true;if(hh[0]
                =="W")dD=true;else dD=false;fS(fi);}else if(hh[0]=="S"){if(hh.Length&lt;1){Echo("Invalid Command:("+hf[hg]
                +")");continue;}double x;bool hn=double.TryParse(hh[1].Trim(),out x);if(hn){fX=x;Echo("Set speed to:"
                +fX.ToString("0.00"));}else{Echo("Invalid Command:("+hf[hg]+")");continue;}}else if(hh[0]=="D"){if(hh.Length
                &lt;1){Echo("Invalid Command:("+hf[hg]+")");continue;}double x;bool hn=double.TryParse(hh[1].Trim(),out
                x);if(hn){fY=x;Echo("Set arrival distance to:"+fY.ToString("0.00"));}else{Echo("Invalid Command:("+hf[hg]
                +")");continue;}}else if(hh[0]=="C"){if(hh.Length&lt;1){Echo("Invalid Command:("+hf[hg]+")");continue;}
                else{Echo(hf[hg]);}}else{int hq;if(ig.TryGetValue(hh[0].ToLower(),out hq)){eX="mode set to "+hq;fS(hq);
                }else{eX="Unknown argument:"+hh[0];}}}return false;}bool hr(string he){return false;}void hs(){if(hz
                ==null)return;g(hz);hz.oP(hw,"Mode",fb.ToString());hz.oP(hw,"current_state",current_state.ToString());
                hz.oP(hw,"PassedArgument",sPassedArgument);hz.oP(hw,"AlertStates",hE.ToString());hz.oP(hw,"craft_operation",
                hC.ToString());hz.oP(hw,"PassedArgument",sPassedArgument);hz.oP(hw,"ReceivedMessage",hF);long ht=0;if
                (SaveFile!=null)ht=SaveFile.EntityId;hz.oP(hw,"SaveID",(long)ht);if(hz.om){if(hz.om){string hu=hz.oT();
                if(SaveFile==null){Storage=hu;}else{SaveFile.WritePublicText(hu,false);}}}else{Echo("Not saving: Same");
                }}string hv="Wico Craft Save";string hw="WCCM2";void SerializeInitCustomData(ob iNIHolder){iNIHolder.oC(hw,
                "SAVE_FILE_NAME",ref hv,true);}IMyTextPanel SaveFile=null;ob hz;int current_state=0;long allBlocksCount
                =0;int hC=cZ;string sPassedArgument="";int hE=0;string hF="";string SerializeInit(){string eW="S";SaveFile
                =null;List&lt;IMyTerminalBlock&gt;bJ=new List&lt;IMyTerminalBlock&gt;();bJ=nz&lt;IMyTextPanel&gt;(hv);if(bJ.Count&gt;1)Echo("Multiple blocks found: \""
                +hv+"\"");else if(bJ.Count==0){bJ=nv&lt;IMyTextPanel&gt;(hv);if(bJ.Count==1)SaveFile=bJ[0]as IMyTextPanel;
                else{bJ=ny&lt;IMyTextPanel&gt;(hv);if(bJ.Count==1)SaveFile=bJ[0]as IMyTextPanel;}}else SaveFile=bJ[0]as IMyTextPanel;
                hz=new ob(this,"");if(SaveFile==null){eW="-";Echo(hv+" (TextPanel) is missing or Named incorrectly. ");
                }return eW;}bool hH(){return SaveFile!=null;}string hI(Vector3D v){string s;s=v.X.ToString("0.00")+":"
                +v.Y.ToString("0.00")+":"+v.Z.ToString("0.00");return s;}bool hJ(string hK,out double x,out double y,
                out double z){string[]hk=hK.Trim().Split(',');if(hk.Length&lt;3){hk=hK.Trim().Split(':');}x=0;y=0;z=0;if
                (hk.Length&lt;3)return false;bool hn=double.TryParse(hk[0].Trim(),out x);bool ho=double.TryParse(hk[1].Trim(),
                out y);bool hp=double.TryParse(hk[2].Trim(),out z);if(!hn||!ho||!hp){return false;}return true;}hR hL;
                void initShipDim(IMyTerminalBlock cj){if(cj==null){cj=(IMyTerminalBlock)Me;}hL=new hR(this,cj);}const
                float hN=0.5f;const float hO=2.5f;const double hP=0.5;const double hQ=2.5;public class hR{private float
                hS,hT,hU;private double hV,hW,hX;private double hY;private Program cv;private gz gw;public hR(Program
                pg,IMyTerminalBlock cj){cv=pg;if(cv.Me.CubeGrid.GridSizeEnum.ToString().ToLower().Contains("small"))
                hY=hP;else hY=hQ;gw=new gz(cj);Vector3D[]hb=new Vector3D[4];gw.gZ(gz.gQ,hb);hW=(hb[0]-hb[1]).Length();
                hX=(hb[0]-hb[2]).Length();gw.gZ(0,hb);hV=(hb[0]-hb[2]).Length();hS=(float)(hV/hY);hT=(float)(hW/hY);
                hU=(float)(hX/hY);}public float hZ(){return hS;}public double ia(){return hV;}public float ib(){return
                hT;}public double ic(){return hW;}public float id(){return hU;}public double ie(){return hX;}public double
                @if(){return hY;}}Dictionary&lt;string,int&gt;ig=new Dictionary&lt;string,int&gt;();string ih="";UpdateFrequency
                ii=UpdateFrequency.Once;bool ij=true;float ik=100;string il="WORLD";void im(ob f){f.oC(il,"MaxWorldMps",
                ref ik,true);}void@in(){ob eV=new ob(this,Me.CustomData);eV.oC(a,"EchoOn",ref io,true);im(eV);mM(eV);
                dV(eV);eU(eV);if(eV.om){Me.CustomData=eV.oT(true);}}bool io=true;Action&lt;string&gt;ip;void iq(string ir)
                {if(io)ip(ir);}public Program(){eT();@in();ip=Echo;Echo=iq;ih=a+":"+b+" V"+c+" ";ip(ih+"Creator");if
                (!Me.CustomName.Contains(b))Me.CustomName="PB "+a+" "+b;if(!Me.Enabled){Echo("I am turned OFF!");}}bool
                @is=false;bool it=false;bool iu=false;bool bWantMedium=false;bool iw=false;double ix=-1;double iy=-2;
                void Main(string he,UpdateType ut){Echo(ih+kd());iu=false;bWantMedium=false;iw=false;var iz=new List&lt;IMyTerminalBlock&gt;();
                GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt;(iz,nl);for(int i=0;i&lt;iz.Count;i++){if(iz[i].IsWorking)
                {Echo("Projector:"+iz[i].CustomName);iw=true;}}if(iw)Echo("Working local Projector found!");if(he!=""
                &amp;&amp;he!="timer"&amp;&amp;he!="wccs")Echo("Arg="+he);if(he=="init"){eW="";@is=false;}if(!@is){if(iw){es("clear",
                ey(sTextPanelReport));es(b+":Construction in Progress\nTurn off projector to continue",ec);}iu=true;
                eZ();it=true;}else{if(it)es(DateTime.Now.ToString()+" "+a+":"+eW,ea,true);dn();if(nA is IMyShipController)
                {ix=((IMyShipController)nA).GetShipSpeed();Vector3D iA=((IMyShipController)nA).GetNaturalGravity();double
                iB=iA.Length();iy=iB/9.81;}if((ut&amp;(UpdateType.Trigger|UpdateType.Terminal))&gt;0){if(hd(he)){hs();ex();
                return;}}else if((ut&amp;(UpdateType.Mod))&gt;0){if(hd(he)){hs();ex();return;}}else if((ut&amp;(UpdateType.Script))
                &gt;0){if(hd(he)){hs();ex();return;}}else if((ut&amp;(UpdateType.Antenna))&gt;0){if(!hr(he)){mm(he);}hs();kj();
                ex();return;}else{he="";}mk();mf();h();dA();}hs();if(iu){Echo("FAST!");Runtime.UpdateFrequency|=ii;}
                else{Runtime.UpdateFrequency&amp;=~(ii);}if(bWantMedium){Echo("MEDIUM");Runtime.UpdateFrequency|=UpdateFrequency.Update10;
                }else{Runtime.UpdateFrequency&amp;=~(UpdateFrequency.Update10);}this.i();it=false;ex();}void iC(string ih
                =null){float iD=0;iD=Runtime.CurrentInstructionCount/(float)Runtime.MaxInstructionCount;if(ih==null)
                ih="Instructions=";Echo(ih+" "+(iD*100).ToString("0.00")+"%");}List&lt;IMyTerminalBlock&gt;iE=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;iF=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;iG=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;iH=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;iI=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;iJ=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;iK=new List&lt;IMyTerminalBlock&gt;();
                double iL=0;double iM=0;double iN=0;double iO=0;double iP=0;double iQ=0;int iR=0;int iS=0;int iT=0;const
                int iU=1;const int iV=2;const int iW=4;const int iX=0xff;Matrix iY=new Matrix(1,0,0,0,0,1,0,0,0,0,1,
                0,0,0,0,1);string iZ="IGNORE";string ja="cutter";string jb="THRUSTERS";void jc(ob iNIHolder){iNIHolder.oC(jb,
                "IgnoreThruster",ref iZ);iNIHolder.oC(jb,"CutterThruster",ref ja);}void jd(IMyTerminalBlock cj,ref List&lt;IMyTerminalBlock&gt;
                iF,ref List&lt;IMyTerminalBlock&gt;iG,ref List&lt;IMyTerminalBlock&gt;iH,ref List&lt;IMyTerminalBlock&gt;iI,ref List&lt;IMyTerminalBlock&gt;
                iJ,ref List&lt;IMyTerminalBlock&gt;iK,int je=iX){iF.Clear();iG.Clear();iH.Clear();iI.Clear();iJ.Clear();iK.Clear();
                iE.Clear();if(cj==null)return;var jf=new List&lt;IMyTerminalBlock&gt;();ns&lt;IMyThrust&gt;(ref jf);for(int i=0;
                i&lt;jf.Count;i++){if(jf[i].CustomName.ToLower().Contains(ja)||jf[i].CustomData.ToLower().Contains(ja))
                continue;if(jf[i].CustomName.ToLower().Contains(iZ)||jf[i].CustomData.ToLower().Contains(iZ))continue;
                iE.Add(jf[i]);}Matrix ck;cj.Orientation.GetMatrix(out ck);Matrix.Transpose(ref ck,out ck);iL=0;iM=0;
                iN=0;iO=0;iP=0;iQ=0;for(int i=0;i&lt;iE.Count;++i){var jg=iE[i]as IMyThrust;Matrix jh;jg.Orientation.GetMatrix(out
                jh);Vector3 cm=Vector3.Transform(jh.Backward,ck);int ji=jj(iE[i]);if(ji==iU)iT++;else if(ji==iV)iS++;
                else if(ji==iW)iR++;if(cm==iY.Left){iP+=jl((IMyThrust)iE[i]);iJ.Add(iE[i]);}else if(cm==iY.Right){iQ
                +=jl((IMyThrust)iE[i]);iK.Add(iE[i]);}else if(cm==iY.Backward){iM+=jl((IMyThrust)iE[i]);iG.Add(iE[i]);
                }else if(cm==iY.Forward){iL+=jl((IMyThrust)iE[i]);iF.Add(iE[i]);}else if(cm==iY.Up){iO+=jl((IMyThrust)iE[i]);
                iI.Add(iE[i]);}else if(cm==iY.Down){iN+=jl((IMyThrust)iE[i]);iH.Add(iE[i]);}}}string jd(IMyTerminalBlock
                cj){iF.Clear();iG.Clear();iH.Clear();iI.Clear();iJ.Clear();iK.Clear();iE.Clear();if(cj==null)return"No Orientation Block";
                var jf=new List&lt;IMyTerminalBlock&gt;();ns&lt;IMyThrust&gt;(ref jf);for(int i=0;i&lt;jf.Count;i++){if(jf[i].CustomName.ToLower().Contains(ja)
                ||jf[i].CustomData.ToLower().Contains(ja))continue;if(jf[i].CustomName.ToLower().Contains(iZ)||jf[i].CustomData.ToLower().Contains(iZ))
                continue;iE.Add(jf[i]);}Matrix ck;cj.Orientation.GetMatrix(out ck);Matrix.Transpose(ref ck,out ck);iL
                =0;iM=0;iN=0;iO=0;iP=0;iQ=0;for(int i=0;i&lt;iE.Count;++i){var jg=iE[i]as IMyThrust;Matrix jh;jg.Orientation.GetMatrix(out
                jh);Vector3 cm=Vector3.Transform(jh.Backward,ck);int ji=jj(iE[i]);if(ji==iU)iT++;else if(ji==iV)iS++;
                else if(ji==iW)iR++;if(cm==iY.Left){iP+=jl((IMyThrust)iE[i]);iJ.Add(iE[i]);}else if(cm==iY.Right){iQ
                +=jl((IMyThrust)iE[i]);iK.Add(iE[i]);}else if(cm==iY.Backward){iM+=jl((IMyThrust)iE[i]);iG.Add(iE[i]);
                }else if(cm==iY.Forward){iL+=jl((IMyThrust)iE[i]);iF.Add(iE[i]);}else if(cm==iY.Up){iO+=jl((IMyThrust)iE[i]);
                iI.Add(iE[i]);}else if(cm==iY.Down){iN+=jl((IMyThrust)iE[i]);iH.Add(iE[i]);}}string s;s="&gt;";s+="F"+iF.Count.ToString("00");
                s+="B"+iG.Count.ToString("00");s+="D"+iH.Count.ToString("00");s+="U"+iI.Count.ToString("00");s+="L"+
                iJ.Count.ToString("00");s+="R"+iK.Count.ToString("00");s+="&lt;";return s;}int jj(IMyTerminalBlock theBlock)
                {if(theBlock is IMyThrust){if(theBlock.BlockDefinition.SubtypeId.Contains("Atmo"))return iU;else if(theBlock.BlockDefinition.SubtypeId.Contains("Hydro"))
                return iV;else return iW;}return 0;}double jl(IMyThrust thruster){return thruster.MaxEffectiveThrust;
                }double jm(List&lt;IMyTerminalBlock&gt;jn,int jo=iX){double jp=0;for(int jq=0;jq&lt;jn.Count;jq++){int jr=jj(jn[jq]);
                if((jr&amp;jo)&gt;0){IMyThrust jg=jn[jq]as IMyThrust;double js=jg.MaxEffectiveThrust;jp+=js;}}return jp;}bool
                jt(List&lt;IMyTerminalBlock&gt;jn,out float ju,out float jv,out float jw){ju=0;jv=0;jw=0;double jx=jm(jn,iW);
                double jy=jm(jn,iU);double jz=jm(jn,iV);MyShipMass jA;jA=((IMyShipController)nA).CalculateShipMass();
                double jB=0;jB=jA.PhysicalMass*iy*9.810;if(jy&gt;0){if(jy&lt;jB){ju=100;jB-=jy;}else{ju=(float)(jB/jy*100);
                if(ju&gt;0)jB-=(jy*ju/100);}}if(jx&gt;0&amp;&amp;jB&gt;0){if(jx&lt;jB){jw=100;jB-=jx;}else{jw=(float)(jB/jx*100);if(jw&gt;0)
                jB-=((jx*jw)/100);}}if(jz&gt;0&amp;&amp;jB&gt;0){if(jz&lt;jB){jv=100;jB-=jz;}else{jv=(float)(jB/jz*100);if(jv&gt;0)jB-=((jz
                *jv)/100);;}}if(jB&gt;0)return false;return true;}List&lt;IMyTerminalBlock&gt;jC(string jD){var jE=new List&lt;IMyTerminalBlock&gt;();
                var jF=new List&lt;IMyBlockGroup&gt;();GridTerminalSystem.GetBlockGroups(jF);for(int jG=0;jG&lt;jF.Count;jG++)
                {if(jF[jG].Name==jD){List&lt;IMyTerminalBlock&gt;jn=null;jF[jG].GetBlocks(jn,nl);for(int jq=0;jq&lt;jn.Count;
                jq++){jE.Add(jn[jq]);}break;}}return jE;}int jH(List&lt;IMyTerminalBlock&gt;jn,float dS,int jo=iX){int jI=
                0;if(dS&gt;100)dS=100;if(dS&lt;0)dS=0;for(int jq=0;jq&lt;jn.Count;jq++){int jr=jj(jn[jq]);if((jr&amp;jo)&gt;0){IMyThrust
                jg=jn[jq]as IMyThrust;if(!jg.IsWorking){jg.Enabled=true;}jI+=1;jg.ThrustOverridePercentage=dS/100f;}
                }return jI;}int jH(List&lt;IMyTerminalBlock&gt;jn,int jJ=100,int jo=iX){return jH(jn,(float)jJ,jo);}bool jH(string
                jK,int jJ=100,int jo=iX){if(jJ&gt;100)jJ=100;var jF=new List&lt;IMyBlockGroup&gt;();GridTerminalSystem.GetBlockGroups(jF);
                for(int jG=0;jG&lt;jF.Count;jG++){if(jF[jG].Name==jK){List&lt;IMyTerminalBlock&gt;jn=null;jF[jG].GetBlocks(jn,
                nl);return(jH(jn,jJ,jo)&gt;0);}}return false;}int jL(List&lt;IMyTerminalBlock&gt;thrusters,int jo=iX,bool jM=
                false){int jI=0;for(int jq=0;jq&lt;thrusters.Count;jq++){int jr=jj(thrusters[jq]);if((jr&amp;jo)&gt;0){jI++;IMyThrust
                jg=thrusters[jq]as IMyThrust;jg.ThrustOverride=0;if(jg.IsWorking&amp;&amp;jM)jg.Enabled=false;else if(!jg.IsWorking
                &amp;&amp;!jM)jg.Enabled=true;}}return jI;}bool jL(string jK){var jF=new List&lt;IMyBlockGroup&gt;();GridTerminalSystem.GetBlockGroups(jF);
                for(int jG=0;jG&lt;jF.Count;jG++){if(jF[jG].Name==jK){List&lt;IMyTerminalBlock&gt;jn=null;jF[jG].GetBlocks(jn,
                nl);return(jL(jn)&gt;0);}}return false;}bool jH(){return(jH(iF)&gt;0);}bool jL(){return(jL(iF)&gt;0);}double jN(List&lt;IMyTerminalBlock&gt;
                jO,int jo=iX){for(int i=0;i&lt;jO.Count;i++){int jr=jj(jO[i]);if((jr&amp;jo)&gt;0&amp;&amp;jO[i].IsWorking){var jg=jO[i]
                as IMyThrust;return jg.ThrustOverride;}}return 0;}bool jP(List&lt;IMyTerminalBlock&gt;jO,int jo=iX){for(int
                i=0;i&lt;jO.Count;i++){int jr=jj(jO[i]);if((jr&amp;jo)&gt;0&amp;&amp;jO[i].IsWorking){return true;}}return false;}int jQ(List&lt;IMyTerminalBlock&gt;
                jO,int jo=iX){int jI=0;for(int i=0;i&lt;jO.Count;i++){int jr=jj(jO[i]);if((jr&amp;jo)&gt;0&amp;&amp;jO[i].IsWorking){jI++;
                }}return jI;}IMyThrust jR(List&lt;IMyTerminalBlock&gt;iz,int jS=iX){foreach(var thrust in iE){if(thrust is
                IMyThrust&amp;&amp;(jj(thrust)&amp;jS)&gt;0)return thrust as IMyThrust;}return null;}double jT(){if(iT&lt;1)return 0;var
                jU=jR(iE,iU);if(jU==null)return 0;return jU.MaxEffectiveThrust/jU.MaxThrust;}double jV(List&lt;IMyTerminalBlock&gt;
                iI,double jW,double jX){var jA=((IMyShipController)nA).CalculateShipMass();double jB=0;jB=jA.PhysicalMass
                *jX*9.810;double jl=jm(iI);double jY=(jl-jB)/jA.TotalMass;double jZ=jW/jY;double ka=jW/2*jZ;return ka;
                }string[]kb={"-","\\","|","/","-","\\","|","/"};int kc=99;string kd(){kc++;if(kc&gt;=kb.Length)kc=0;return
                kb[kc];}const string ke="[WCCT]";const string kf="[WCCS]";const string kg="[WCCM]";Dictionary&lt;string,
                List&lt;IMyTerminalBlock&gt;&gt;kh=new Dictionary&lt;string,List&lt;IMyTerminalBlock&gt;&gt;();void ki(){kh.Clear();}void
                kj(){if(!kk(ke))kk(kg);}bool kk(string sKeyword="[WCCS]"){bool km=false;List&lt;IMyTerminalBlock&gt;bJ=new
                List&lt;IMyTerminalBlock&gt;();IMyTimerBlock kn=null;if(kh.ContainsKey(sKeyword)){bJ=kh[sKeyword];}else{bJ
                =nv&lt;IMyTerminalBlock&gt;(sKeyword);kh.Add(sKeyword,bJ);}for(int i=0;i&lt;bJ.Count;i++){kn=bJ[i]as IMyTimerBlock;
                if(kn!=null){kn.ApplyAction("TriggerNow");km=true;}}return km;}double ko=-1;double kp=0.50;double kq
                =-1;IMyShipController kr=null;double ks=85;List&lt;IMyTerminalBlock&gt;kt=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                ku=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;kv=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                kw=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;kx=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                ky=new List&lt;IMyTerminalBlock&gt;();IMySensorBlock kz=null;bool kA=false;bool kB=false;bool kC=false;double
                kD=100;double kE=50;double kF=15;double kG=100;double kH=100*0.5;double kI=100*0.25;double kJ=5;float
                kK=50f;bool kL=false;bool kM=false;void kN(){kr=null;pl();nK=0.01f;kq=0;ko=-1;}void kO(Vector3D dK,double
                maxSpeed,IMyTerminalBlock kQ,int ji=iX){ks=maxSpeed;if(ks&gt;ik)ks=ik;if((hC&amp;da)&gt;0){kM=true;pJ();}else kM
                =false;if((hC&amp;db)&gt;0){kL=true;}else kL=false;kr=kQ as IMyShipController;Vector3D dL=dK-kr.CenterOfMass;
                double dM=dL.Length();jd(kr,ref ku,ref kt,ref ky,ref kx,ref kv,ref kw,ji);pl();if(pb.Count&gt;0){kz=pb[0];
                if(kL||kM)kz.DetectAsteroids=false;else kz.DetectAsteroids=true;kz.DetectEnemy=true;kz.DetectLargeShips
                =true;kz.DetectSmallShips=true;kz.DetectStations=true;kz.DetectPlayers=false;kK=kz.GetMaximum&lt;float&gt;("Front");
                }else{kz=null;kK=0;}kA=false;kB=false;kC=false;double kR=ks;if(!kM&amp;&amp;!kL)kR=lg(kt,dM);if(kR&lt;ks)ks=kR;
                eW+="\nDistance="+eQ(dM)+" OptimalV="+kR;kG=ks;kH=ks*0.50;kI=ks*0.25;if(kI&lt;5)kI=5;if(kI&gt;kH)kH=kI;if(kI
                &gt;kG)kG=kI;kF=jV(kt,kI+(kH-kI)/2,0);kE=jV(kt,kH+(kG-kH)/2,0);kD=jV(kt,kG,0);ko=-1;kq=0;nK=0.01f;}void
                kS(Vector3D dK,float arrivalDistance,int kU,int colDetectState,bool kW=false){if(fZ)Echo("dTM:"+kU);
                if(kr==null){kO(dK,fX,nA);}if(ko&gt;=0)ko+=Runtime.TimeSinceLastRun.TotalMilliseconds;if(kq&gt;=0)kq+=Runtime.TimeSinceLastRun.TotalMilliseconds;
                Vector3D dL=dK-kr.CenterOfMass;double dM=dL.Length();if(fZ){Echo("dTM:distance="+eQ(dM));Echo("dTM:velocity="
                +ix.ToString("0.00"));Echo("dTM:tmMaxSpeed="+ks.ToString("0.00"));}if(dM&lt;arrivalDistance){j();current_state
                =kU;kN();iu=true;return;}eJ("TargetLocation",dK);List&lt;IMySensorBlock&gt;kX=null;double kY=jV(kt,ix,0);Echo("StoppingD="
                +eQ(kY));if(pb.Count&gt;0){float kZ=Math.Min(50f,(float)kY*1.5f);pn(kz,0,0,0,0,kZ,0);}else Echo("No Sensors for Travel movement");
                bool la=false;if(kM||kL){double lb=-999;lb=bd(dK,nA);Echo("yawangle="+lb.ToString());if(kM){Echo("Sled");
                bB(lb,"Yaw");}else if(kL){Echo("Rotor");gv(lb);}la=Math.Abs(lb)&lt;.05;}else{la=nL("forward",dL,nA);}kr.DampenersOverride
                =true;if((dM-kY)&lt;arrivalDistance){nK=0.005f;Echo("Waiting for stop");if(!la)iu=true;j();return;}if(la)
                {bWantMedium=true;Echo("Aimed");oa();if(gb&amp;&amp;(kq&gt;pd||kq&lt;0)){kq=0;kX=pj();if(kX.Count&gt;0){var lc=new List&lt;MyDetectedEntityInfo&gt;();
                string s="";for(int i1=0;i1&lt;kX.Count;i1++){kX[i1].DetectedEntities(lc);int j1=0;bool ld=false;if(lc.Count
                &gt;0)ld=true;for(;j1&lt;lc.Count;j1++){s="\nSensor TRIGGER!";s+="\nName: "+lc[j1].Name;s+="\nType: "+lc[j1].Type;
                s+="\nRelationship: "+lc[j1].Relationship;s+="\n";if(fZ){Echo(s);es(s,ea);}if(lc[j1].Type==MyDetectedEntityType.Planet)
                {ld=false;}if(lc[j1].Type==MyDetectedEntityType.LargeGrid||lc[j1].Type==MyDetectedEntityType.SmallGrid)
                {if(lc[j1].BoundingBox.Contains(dK)!=ContainmentType.Disjoint){if(fZ)Echo("Ignoring collision because we want to be INSIDE");
                ld=false;}}if(ld)break;}if(ld){bW=lc[j1];kN();current_state=colDetectState;iu=true;j();return;}}}else
                bW=new MyDetectedEntityInfo();}double le=kY*2;{if(le&lt;100)if(dM&lt;1000)le=dM;else le=1000;le=Math.Min(dM,
                le);}{Echo("Scanning distance="+le);}if(ga&amp;&amp;(ko&gt;kp||ko&lt;0)&amp;&amp;dM&gt;kK){if(bZ(bO,le)){ko=0;if(!bW.IsEmpty())
                {bool ld=true;if(kW){if(bW.Type==MyDetectedEntityType.Asteroid){if(bW.BoundingBox.Contains(dK)!=ContainmentType.Disjoint)
                {ld=false;double lf=((Vector3D)bW.HitPosition-nA.GetPosition()).Length();if((lf-kY)&lt;arrivalDistance)
                {j();current_state=kU;kN();return;}}}else if(bW.Type==MyDetectedEntityType.Planet){ld=false;}else{}}
                if(fZ){Echo("raycast hit:"+bW.Type.ToString());es("Camera Trigger collision",ea);}if(ld){kN();current_state
                =colDetectState;iu=true;j();return;}}else{if(fZ){es("Camera Scan Clear",ea);}}}else{if(fZ){es("No Scan Available",
                ea);}}}else Echo("Raycast delay");if(fZ)Echo("dtmFar="+eQ(kD));if(fZ)Echo("dtmApproach="+eQ(kE));if(fZ)
                Echo("dtmPrecision="+eQ(kF));if(dM&gt;kD&amp;&amp;!kA){Echo("dtmFar");lI(kG,100f);}else if(dM&gt;kE&amp;&amp;!kB){Echo("Approach");
                kA=true;lI(kH,100f);}else if(dM&gt;kF&amp;&amp;!kC){Echo("Precision");if(!kB)nK=0.005f;kB=true;lI(kI,55f);}else
                {Echo("Close");if(!kC)nK=0.005f;kC=true;lI(kJ,55f);}}else{if(fZ)Echo("Aiming");iu=true;kr.DampenersOverride
                =true;if(ix&lt;5){jL(iE);}else{jL(kt,iX,true);}}}double lg(List&lt;IMyTerminalBlock&gt;lh,double dM){Echo("#thrusters="
                +lh.Count.ToString());if(lh.Count&lt;1)return ik;MyShipMass jA;jA=((IMyShipController)nA).CalculateShipMass();
                double jl=jm(lh);double jY=jl/jA.PhysicalMass;double kR,jZ,ka;kR=((dM*.75)/2)/(jY);Echo("COS");do{Echo("COS:DO");
                jZ=kR/jY;ka=kR/2*jZ;if(ka&gt;dM){kR*=0.85;}Echo("stoppingM="+ka.ToString("F1")+" distance="+dM.ToString("N1"));
                }while(ka&gt;dM);Echo("COS:X");return kR;}Vector3D li;void lj(Vector3D dK){if(ko&gt;=0)ko+=Runtime.TimeSinceLastRun.TotalMilliseconds;
                if(kq&gt;=0)kq+=Runtime.TimeSinceLastRun.TotalMilliseconds;Vector3D lk;if(bW.HitPosition.HasValue){lk=(Vector3D)bW.HitPosition;
                }else{lk=nA.GetPosition();}Vector3D bj=bW.Position;Vector3D dL=(bj-lk);dL.Normalize();Vector3D ll=bW.BoundingBox.Min;
                Vector3D lm=bW.BoundingBox.Max;double ln=(bj-ll).Length();double lo=ln+hL.ic()*5;Vector3D lp;lp=Vector3D.Cross(dK,
                lk);lp.Normalize();lp=lk+lp*lo;li=lp;}bool lq=true;bool lr=true;bool ls=true;bool lt=true;bool lu=true;
                bool lv=true;MyDetectedEntityInfo lw=new MyDetectedEntityInfo();MyDetectedEntityInfo lx=new MyDetectedEntityInfo();
                MyDetectedEntityInfo ly=new MyDetectedEntityInfo();MyDetectedEntityInfo lz=new MyDetectedEntityInfo();
                MyDetectedEntityInfo lA=new MyDetectedEntityInfo();MyDetectedEntityInfo lB=new MyDetectedEntityInfo();
                void lC(){if(ko&gt;=0)ko+=Runtime.TimeSinceLastRun.TotalMilliseconds;if(kq&gt;=0)kq+=Runtime.TimeSinceLastRun.TotalMilliseconds;
                lq=true;lr=true;ls=true;lt=true;lu=false;lv=true;lw=new MyDetectedEntityInfo();lx=new MyDetectedEntityInfo();
                ly=new MyDetectedEntityInfo();lz=new MyDetectedEntityInfo();lA=new MyDetectedEntityInfo();lB=new MyDetectedEntityInfo();
                if(bW.Type==MyDetectedEntityType.LargeGrid||bW.Type==MyDetectedEntityType.SmallGrid){}if(bS.Count&lt;1)
                lq=false;if(bT.Count&lt;1)lr=false;if(bR.Count&lt;1)ls=false;if(bQ.Count&lt;1)lt=false;if(bO.Count&lt;1)lv=false;
                if(bP.Count&lt;1)lu=false;}bool lD(){if(ko&gt;=0)ko+=Runtime.TimeSinceLastRun.TotalMilliseconds;if(kq&gt;=0)kq
                +=Runtime.TimeSinceLastRun.TotalMilliseconds;MatrixD lE=nA.WorldMatrix;Vector3D dL=lE.Forward;Echo("ScanEscape()");
                if(lq){if(bZ(bS,200)){lq=false;lw=bW;if(bW.IsEmpty()){dL=lE.Left;dL.Normalize();li=nA.GetPosition()+
                dL*200;return true;}}}if(lr){if(bZ(bT,200)){lr=false;lx=bW;if(bW.IsEmpty()){dL=lE.Right;dL.Normalize();
                li=nA.GetPosition()+dL*200;return true;}}}if(ls){if(bZ(bR,200)){ly=bW;ls=false;if(bW.IsEmpty()){dL=lE.Up;
                dL.Normalize();li=nA.GetPosition()+dL*200;return true;}}}if(lt){if(bZ(bQ,200)){lz=bW;lt=false;if(bW.IsEmpty())
                {dL=lE.Down;dL.Normalize();li=nA.GetPosition()+dL*200;return true;}}}if(lu){if(bZ(bP,200)){lA=bW;lu=
                false;if(bW.IsEmpty()){dL=lE.Backward;dL.Normalize();li=nA.GetPosition()+dL*200;return true;}}}if(lv)
                {if(bZ(bO,200)){lv=false;if(bW.IsEmpty()){dL=lE.Forward;dL.Normalize();li=nA.GetPosition()+dL*200;return
                true;}}}if(lv||lu||ls||lt||lq||lr){Echo("More scans");return false;}Echo("Scans done. Choose longest");
                MyDetectedEntityInfo lF=lA;Vector3D lG=nA.GetPosition();dL=lE.Backward;if(lF.HitPosition==null||lw.HitPosition
                !=null&amp;&amp;Vector3D.DistanceSquared(lG,(Vector3D)lF.HitPosition)&lt;Vector3D.DistanceSquared(lG,(Vector3D)lw.HitPosition))
                {dL=lE.Left;lF=lw;}if(lF.HitPosition==null||lx.HitPosition!=null&amp;&amp;Vector3D.DistanceSquared(lG,(Vector3D)lF.HitPosition)
                &lt;Vector3D.DistanceSquared(lG,(Vector3D)lx.HitPosition)){dL=lE.Right;lF=lx;}if(lF.HitPosition==null||
                ly.HitPosition!=null&amp;&amp;Vector3D.DistanceSquared(lG,(Vector3D)lF.HitPosition)&lt;Vector3D.DistanceSquared(lG,
                (Vector3D)ly.HitPosition)){dL=lE.Up;lF=ly;}if(lF.HitPosition==null||lz.HitPosition!=null&amp;&amp;Vector3D.DistanceSquared(lG,
                (Vector3D)lF.HitPosition)&lt;Vector3D.DistanceSquared(lG,(Vector3D)lz.HitPosition)){dL=lE.Down;lF=lz;}if
                (lF.HitPosition==null||lB.HitPosition!=null&amp;&amp;Vector3D.DistanceSquared(lG,(Vector3D)lF.HitPosition)&lt;Vector3D.DistanceSquared(lG,
                (Vector3D)lB.HitPosition)){dL=lE.Forward;lF=lB;}if(lF.HitPosition==null)return false;double dM=Vector3D.Distance(lG,
                (Vector3D)lF.HitPosition);Echo("Distance="+eQ(dM));dL.Normalize();li=nA.GetPosition()+dL*dM/2;if(dM&gt;
                4){return true;}return false;}void lH(float dS){if(kL){gm(dS);}else jH(ku,dS);}void lI(double maxSpeed,
                float maxThrust){if(!kL){if(ix&lt;1)jH(ku,maxThrust);else if(ix&lt;maxSpeed*.75)jH(ku,25f);else if(ix&lt;maxSpeed
                *.85)jH(ku,15f);else if(ix&lt;=maxSpeed*.98){jH(ku,1f);}else if(ix&gt;=maxSpeed*1.02){jL(iE);}else{jL(iE);
                jL(kt,iX,true);}}else{lH(maxThrust);}}bool lJ=false;List&lt;IMyRadioAntenna&gt;lK=new List&lt;IMyRadioAntenna&gt;();
                List&lt;IMyLaserAntenna&gt;lL=new List&lt;IMyLaserAntenna&gt;();string lM(){lK.Clear();lL.Clear();ns&lt;IMyRadioAntenna&gt;(ref
                lK);ns&lt;IMyLaserAntenna&gt;(ref lL);for(int i1=0;i1&lt;lK.Count;++i1){if(lK[i1].CustomName.Contains("unused")
                ||lK[i1].CustomData.Contains("unused"))continue;if(!lJ){a="Wico "+lK[i1].CustomName.Split('!')[0].Trim();
                lJ=true;}}return"A"+lK.Count.ToString("0");}void lN(){for(int i=0;i&lt;lK.Count;i++){lK[i].Enabled=true;
                }}string lO="";void lP(){if(hF!=""){if(lO==hF){hF="";}lO=hF;}else lO="";}void lQ(){}void lR(){float lS
                =0;int lT=-1;for(int i=0;i&lt;lK.Count;i++){if(lK[i].AttachedProgrammableBlock==Me.EntityId){lT=i;break;
                }if(lK[i].Radius&gt;lS&amp;&amp;lK[i].AttachedProgrammableBlock==0){lT=i;lS=lK[i].Radius;}}if(lT&gt;=0){if(lK[lT].AttachedProgrammableBlock
                !=Me.EntityId)eW+="\nSetting Antenna PB";lK[lT].AttachedProgrammableBlock=Me.EntityId;}else{}}void lU(bool
                lV=false){if(lK.Count&lt;1)lM();foreach(var a in lK){a.Radius=200;if(a.AttachedProgrammableBlock&gt;0||lV)
                {a.Enabled=true;}}}void lW(float lX=200,bool lV=false){if(lK.Count&lt;1)lM();foreach(var a1 in lK){if(a1.AttachedProgrammableBlock
                &gt;0||lV){a1.Radius=lX;a1.Enabled=true;}}}Vector3D lY(){if(lK.Count&lt;1)lM();foreach(var a1 in lK){if(a1.AttachedProgrammableBlock
                ==Me.EntityId){return a1.GetPosition();}}foreach(var a1 in lK){return a1.GetPosition();}Vector3D lZ=
                new Vector3D();return lZ;}void ma(bool lV=false,float mb=float.MaxValue){if(lK==null||lK.Count&lt;1)lM();
                if(mb&lt;200)mb=200;foreach(var a in lK){if(a.AttachedProgrammableBlock&gt;0||lV){float mc=a.GetMaximum&lt;float&gt;("Radius");
                if(mb&lt;mc)mc=mb;a.Radius=mc;a.Enabled=true;}}}int md(){if(lK.Count&lt;1)lM();return(lK.Count);}List&lt;string&gt;
                me=new List&lt;string&gt;();void mf(){if(me.Count&gt;0){mg(me[0]);me.RemoveAt(0);}if(me.Count&gt;0)iu=true;}void
                mg(string mh){bool mi=false;if(lK.Count&lt;1)lM();for(int i=0;i&lt;lK.Count;i++){mi=lK[i].TransmitMessage(mh);
                if(mi)break;}if(!mi){if(md()&gt;0){me.Add(mh);iu=true;}}}List&lt;string&gt;mj=new List&lt;string&gt;();void mk(bool
                ml=false){if(mj.Count&gt;0){if(hF==""){hF=mj[0];mj.RemoveAt(0);if(ml){iu=true;}else{kj();}}}if(mj.Count
                &gt;0){}}void mm(string mh){mj.Add(mh);mk();}void mn(){if(lK.Count&gt;0){Echo(mj.Count+" Pending Incoming Messages");
                for(int i=0;i&lt;mj.Count;i++)Echo(i+":"+mj[i]);}else Echo("No antennas found");}List&lt;IMyTerminalBlock&gt;
                mo=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;mp=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                mq=new List&lt;IMyTerminalBlock&gt;();bool mr=false;string ms="[BASE]";string mt="[DOCK]";string mu="CONNECTORS";
                void mv(ob iNIHolder){iNIHolder.oC(mu,"BaseConnector",ref ms,true);iNIHolder.oC(mu,"DockConnector",ref
                mt,true);}string mw(){mr=false;mo.Clear();mp.Clear();mq.Clear();mx();return"CL"+mo.Count.ToString()+
                "CD"+mp.Count.ToString()+"CB"+mq.Count.ToString();}void mx(){if(mo.Count&lt;1&amp;&amp;!mr)mo=ns&lt;IMyShipConnector&gt;();
                if(mp.Count&lt;1&amp;&amp;!mr)mp=nv&lt;IMyShipConnector&gt;(mt);if(mp.Count&lt;1&amp;&amp;!mr)mp=mo;if(mq.Count&lt;1&amp;&amp;!mr)mq=nv&lt;IMyShipConnector&gt;(ms);
                mr=true;return;}bool my(){mx();for(int i=0;i&lt;mp.Count;i++){var mz=mp[i]as IMyShipConnector;if(mz==null)
                continue;if(mz.Status==MyShipConnectorStatus.Connectable)return true;}return false;}bool mA(){mx();for
                (int i=0;i&lt;mp.Count;i++){var mz=mp[i]as IMyShipConnector;if(mz==null)continue;if(mz.Status==MyShipConnectorStatus.Connected)
                {var mB=mz.OtherConnector;if(mB.CubeGrid==mz.CubeGrid){continue;}else return true;}}return false;}IMyTerminalBlock
                mC(){mx();if(mp.Count&gt;0){return mp[0];}return null;}IMyTerminalBlock mD(bool mE=false){mx();for(int i
                =0;i&lt;mp.Count;i++){var mz=mp[i]as IMyShipConnector;if(mz==null)continue;if(mz.Status==MyShipConnectorStatus.Connected)
                {var mB=mz.OtherConnector;if(mB.CubeGrid==mz.CubeGrid){continue;}else{if(!mE){return mz.OtherConnector;
                }else{return mp[i];}}}}return null;}void mF(bool mG=true,bool bK=true){mx();for(int i=0;i&lt;mp.Count;i++)
                {var mz=mp[i]as IMyShipConnector;if(mz==null)continue;if(mz.Status==MyShipConnectorStatus.Connected)
                {var mB=mz.OtherConnector;if(mB.CubeGrid==mz.CubeGrid){continue;}}if(mG){if(mz.Status==MyShipConnectorStatus.Connectable)
                mz.ApplyAction("SwitchLock");}else{if(mz.Status==MyShipConnectorStatus.Connected)mz.ApplyAction("SwitchLock");
                }mz.Enabled=bK;}return;}string mH="NOFOLLOW";string mI="!WCC";string mJ="[NAV]";string mK="Craft Remote Control";
                string mL="GRIDS";void mM(ob iNIHolder){iNIHolder.oC(mL,"NoFollow",ref mH,true);iNIHolder.oC(mL,"BlockIgnore",
                ref mI,true);iNIHolder.oC(mL,"OrientationBlockContains",ref mJ,true);iNIHolder.oC(mL,"OrientationBlockNamed",
                ref mK,true);}List&lt;IMyTerminalBlock&gt;mN=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTextPanel&gt;mO=new List&lt;IMyTextPanel&gt;();
                List&lt;IMyTextPanel&gt;mP=new List&lt;IMyTextPanel&gt;();List&lt;IMyTerminalBlock&gt;mQ=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyCubeGrid&gt;mR=new List&lt;IMyCubeGrid&gt;();List&lt;IMyCubeGrid&gt;mS=new List&lt;IMyCubeGrid&gt;();List&lt;IMyCubeGrid&gt;
                mT=new List&lt;IMyCubeGrid&gt;();List&lt;IMyCubeGrid&gt;mU=new List&lt;IMyCubeGrid&gt;();bool mV(){List&lt;IMyTerminalBlock&gt;
                mW=new List&lt;IMyTerminalBlock&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyTerminalBlock&gt;(mW);if(allBlocksCount
                !=mW.Count){return true;}return false;}string mX(){mN.Clear();mU.Clear();mR.Clear();mS.Clear();mT.Clear();
                mO.Clear();mP.Clear();GridTerminalSystem.GetBlocksOfType&lt;IMyTerminalBlock&gt;(mN);allBlocksCount=mN.Count;
                foreach(var block in mN){var bu=block.CubeGrid;if(!mU.Contains(bu)){mU.Add(bu);}}na(Me.CubeGrid);foreach
                (var grid in mU){if(mR.Contains(grid))continue;bool mY=false;List&lt;IMyShipConnector&gt;mZ=new List&lt;IMyShipConnector&gt;();
                GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt;(mZ,(x1=&gt;x1.CubeGrid==grid));foreach(var connector
                in mZ){if(connector.Status==MyShipConnectorStatus.Connected){if(mR.Contains(connector.OtherConnector.CubeGrid)
                ||mS.Contains(connector.OtherConnector.CubeGrid)){continue;}if(mR.Contains(connector.OtherConnector.CubeGrid))
                mY=true;else mY=false;}}if(mY){if(!mT.Contains(grid)){mT.Add(grid);}}if(!mS.Contains(grid)){mS.Add(grid);
                }}string s="";s+="B"+mN.Count.ToString();s+="G"+mU.Count.ToString();s+="L"+mR.Count.ToString();s+="D"
                +mT.Count.ToString();s+="R"+mS.Count.ToString();return s;}void na(IMyCubeGrid bu){if(bu==null)return;
                if(!mR.Contains(bu)){mR.Add(bu);nb(bu);ne(bu);ng(bu);ni(bu);}}void nb(IMyCubeGrid grid){List&lt;IMyMotorStator&gt;
                nc=new List&lt;IMyMotorStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(nc,(x=&gt;x.TopGrid==grid));
                foreach(var rotor in nc){if(rotor.CustomName.Contains(mH)||rotor.CustomData.Contains(mH))continue;na(rotor.CubeGrid);
                }List&lt;IMyMotorAdvancedStator&gt;nd=new List&lt;IMyMotorAdvancedStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorAdvancedStator&gt;(nd,
                (x=&gt;x.TopGrid==grid));foreach(var rotor in nd){if(rotor.CustomName.Contains(mH)||rotor.CustomData.Contains(mH))
                continue;na(rotor.CubeGrid);}}void ne(IMyCubeGrid grid){List&lt;IMyPistonBase&gt;nf=new List&lt;IMyPistonBase&gt;();
                GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt;(nf,(x=&gt;x.TopGrid==grid));foreach(var piston in nf)
                {na(piston.CubeGrid);}}void ng(IMyCubeGrid grid){List&lt;IMyMotorStator&gt;nc=new List&lt;IMyMotorStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(nc,
                (x1=&gt;x1.CubeGrid==grid));foreach(var rotor in nc){if(rotor.CustomName.Contains(mH)||rotor.CustomData.Contains(mH))
                continue;IMyCubeGrid nh=rotor.TopGrid;if(nh!=null&amp;&amp;nh!=grid){na(nh);}}nc.Clear();List&lt;IMyMotorAdvancedStator&gt;
                nd=new List&lt;IMyMotorAdvancedStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorAdvancedStator&gt;(nd,
                (x1=&gt;x1.CubeGrid==grid));foreach(var rotor in nd){if(rotor.CustomName.Contains(mH)||rotor.CustomData.Contains(mH))
                continue;IMyCubeGrid nh=rotor.TopGrid;if(nh!=null&amp;&amp;nh!=grid){na(nh);}}}void ni(IMyCubeGrid grid){List&lt;IMyPistonBase&gt;
                nf=new List&lt;IMyPistonBase&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt;(nf,(x1=&gt;x1.CubeGrid==
                grid));foreach(var piston in nf){IMyCubeGrid nh=piston.TopGrid;if(nh!=null&amp;&amp;nh!=grid){if(!mR.Contains(nh))
                {na(nh);}}}}List&lt;IMyCubeGrid&gt;nj(){if(mR.Count&lt;1){mX();}return mR;}List&lt;IMyCubeGrid&gt;nk(){if(mR.Count&lt;
                1){mX();}return mT;}bool nl(IMyTerminalBlock block){return nj().Contains(block.CubeGrid);}bool nm(long
                nn){for(int i1=0;i1&lt;mR.Count;i1++){if((long)mR[i1].EntityId==nn)return true;}return false;}bool nm(IMyCubeGrid
                nn){return nj().Contains(nn);}bool no(IMyTerminalBlock gR){var g1=nk();if(g1==null)return false;return
                g1.Contains(gR.CubeGrid);}void np(){if(mN.Count&lt;1)mX();mQ.Clear();foreach(var b1 in mN){if(nl(b1)&amp;&amp;!(b1.CustomName.Contains(mI)
                ||b1.CustomData.Contains(mI)))mQ.Add(b1);}}IMyTerminalBlock nq(string nr){IMyTerminalBlock gR;gR=(IMyTerminalBlock)GridTerminalSystem.GetBlockWithName(nr);
                if(gR==null)throw new Exception(nr+" Not Found");return gR;}public List&lt;T&gt;ns&lt;T&gt;(ref List&lt;T&gt;nt,string
                nu=null)where T:class{if(nt==null)nt=new List&lt;T&gt;();else nt.Clear();if(mQ.Count&lt;1)np();for(int e1=0;e1
                &lt;mQ.Count;e1++){if(mQ[e1]is T&amp;&amp;((nu==null)||(nu!=null&amp;&amp;mQ[e1].CustomName.StartsWith(nu)))){nt.Add((T)mQ[e1]);
                }}return nt;}public List&lt;IMyTerminalBlock&gt;ns&lt;T&gt;(ref List&lt;IMyTerminalBlock&gt;nt,string nu=null)where T:
                class{if(mN.Count&lt;1)mX();if(nt==null)nt=new List&lt;IMyTerminalBlock&gt;();else nt.Clear();if(mQ.Count&lt;1)np();
                for(int e1=0;e1&lt;mQ.Count;e1++){if(mQ[e1]is T&amp;&amp;((nu==null)||(nu!=null&amp;&amp;mQ[e1].CustomName.StartsWith(nu))))
                {nt.Add(mQ[e1]);}}return nt;}public List&lt;IMyTerminalBlock&gt;ns&lt;T&gt;(string nu=null)where T:class{var nt=
                new List&lt;IMyTerminalBlock&gt;();ns&lt;T&gt;(ref nt,nu);return nt;}public List&lt;IMyTerminalBlock&gt;nv&lt;T&gt;(string Keyword
                =null)where T:class{var nt=new List&lt;IMyTerminalBlock&gt;();if(mQ.Count&lt;1)np();for(int e1=0;e1&lt;mQ.Count;
                e1++){if(mQ[e1]is T&amp;&amp;Keyword!=null&amp;&amp;(mQ[e1].CustomName.Contains(Keyword)||mQ[e1].CustomData.Contains(Keyword)))
                {nt.Add(mQ[e1]);}}return nt;}public List&lt;IMyTextPanel&gt;nw(string nu=null){if(mN.Count&lt;1)mX();var nt=new
                List&lt;IMyTextPanel&gt;();if(mO.Count&gt;1){foreach(var t1 in mO){if(nu!=null&amp;&amp;(t1.CustomName.Contains(nu)||
                t1.CustomData.Contains(nu)))nt.Add(t1);}}else{foreach(var t1 in mN){if(t1 is IMyTextPanel&amp;&amp;nl(t1)&amp;&amp;!(t1.CustomName.Contains(mI)
                ||t1.CustomData.Contains(mI))){if(nu!=null&amp;&amp;(t1.CustomName.Contains(nu)||t1.CustomData.Contains(nu)))
                nt.Add(t1 as IMyTextPanel);mO.Add(t1 as IMyTextPanel);}}}return nt;}public List&lt;IMyTextPanel&gt;nx(string
                nu=null){if(mQ.Count&lt;1)np();var nt=new List&lt;IMyTextPanel&gt;();if(mP.Count&gt;1){foreach(var t1 in mP){if(nu
                !=null&amp;&amp;(t1.CustomName.Contains(nu)||t1.CustomData.Contains(nu)))nt.Add(t1);}}else{foreach(var t1 in
                mQ){if(t1 is IMyTextPanel&amp;&amp;Me.CubeGrid==t1.CubeGrid){if(nu!=null&amp;&amp;(t1.CustomName.Contains(nu)||t1.CustomData.Contains(nu)))
                nt.Add(t1 as IMyTextPanel);mP.Add(t1 as IMyTextPanel);}}}return nt;}public List&lt;IMyTerminalBlock&gt;ny&lt;T&gt;(string
                nu=null)where T:class{if(mQ.Count&lt;1)np();var nt=new List&lt;IMyTerminalBlock&gt;();for(int e1=0;e1&lt;mQ.Count;
                e1++){if(mQ[e1]is T&amp;&amp;Me.CubeGrid==mQ[e1].CubeGrid&amp;&amp;nu!=null&amp;&amp;(mQ[e1].CustomName.Contains(nu)||mQ[e1].CustomData.Contains(nu)))
                {nt.Add(mQ[e1]);}}return nt;}public List&lt;IMyTerminalBlock&gt;nz&lt;T&gt;(string nu=null)where T:class{if(mQ.Count
                &lt;1)np();var nt=new List&lt;IMyTerminalBlock&gt;();for(int e1=0;e1&lt;mQ.Count;e1++){if(mQ[e1]is T&amp;&amp;nu!=null&amp;&amp;
                mQ[e1].CustomName==nu){nt.Add(mQ[e1]);}}return nt;}IMyTerminalBlock nA=null;string DefaultOrientationBlockInit()
                {string sInitResults="";var centerSearch=new List&lt;IMyTerminalBlock&gt;();ns&lt;IMyTerminalBlock&gt;(ref centerSearch,
                mK);if(centerSearch.Count==0){centerSearch=nv&lt;IMyRemoteControl&gt;(mJ);if(centerSearch.Count==0){ns&lt;IMyRemoteControl&gt;(ref
                centerSearch);if(centerSearch.Count==0){ns&lt;IMyCockpit&gt;(ref centerSearch);int i=0;for(;i&lt;centerSearch.Count;
                i++){Echo("Checking Controller:"+centerSearch[i].CustomName);if(centerSearch[i]is IMyCryoChamber)continue;
                break;}if(i&gt;=centerSearch.Count){sInitResults+="!!NO valid Controller";Echo("No Controller found");}
                else{sInitResults+="S";Echo("Using good ship Controller: "+centerSearch[i].CustomName);}}else{sInitResults
                +="R";Echo("Using First Remote control found: "+centerSearch[0].CustomName);}}}else{sInitResults+="N";
                Echo("Using Named: "+centerSearch[0].CustomName);}if(centerSearch.Count&gt;0)nA=centerSearch[0];return sInitResults;
                }string nD="!NAV";void nE(ob f){f.oC(mL,"GyroIgnore",ref nD,true);f.oC(mL,"LIMIT_GYROS",ref nG,true);
                f.oC(mL,"LEAVE_GYROS",ref nH,true);}double nF=0.9;int nG=3;int nH=-1;IMyShipController nI;List&lt;IMyGyro&gt;
                nJ;float nK=0.01f;bool GyroMain(string argument){if(nI==null)nY();if(nI is IMyShipController){Vector3D
                nN=(nI as IMyShipController).GetNaturalGravity();return nL(argument,nN,nA);}else{Echo("No Controller for gravity");
                }return true;}bool nL(string nM,Vector3D nO,IMyTerminalBlock nP){bool dJ=true;if(nI==null)nY();Matrix
                or;nP.Orientation.GetMatrix(out or);Vector3D nQ;nM=nM.ToLower();if(nM.Contains("rocket"))nQ=or.Backward;
                else if(nM.Contains("up"))nQ=or.Up;else if(nM.Contains("backward"))nQ=or.Backward;else if(nM.Contains("forward"))
                nQ=or.Forward;else nQ=or.Down;nO.Normalize();for(int i=0;i&lt;nJ.Count;++i){var g=nJ[i];g.Orientation.GetMatrix(out
                or);var nR=Vector3D.Transform(nQ,MatrixD.Transpose(or));var nS=Vector3D.Transform(nO,MatrixD.Transpose(g.WorldMatrix.GetOrientation()));
                var nT=Vector3D.Cross(nR,nS);double nU=Vector3D.Dot(nR,nS);double nV=nT.Length();nV=Math.Atan2(nV,Math.Sqrt(Math.Max(0.0,
                1.0-nV*nV)));if(nU&lt;0)nV=Math.PI-nV;if(nV&lt;nK){g.GyroOverride=false;continue;}float nW=g.GetMaximum&lt;float&gt;("Yaw");
                double nX=nW*(nV/Math.PI)*nF;nX=Math.Min(nW,nX);nX=Math.Max(0.01,nX);nT.Normalize();nT*=nX;float Z=-(float)nT.X;
                g.Pitch=Z;float X=-(float)nT.Y;g.Yaw=X;float bb=-(float)nT.Z;g.Roll=bb;g.GyroOverride=true;dJ=false;
                }return dJ;}string nY(){string s="";var l=new List&lt;IMyTerminalBlock&gt;();nI=nA as IMyShipController;if
                (nI==null){if(l.Count&lt;1)return"No RC!";}oa();GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt;(l,x=&gt;x.CubeGrid
                ==nA.CubeGrid);var l2=new List&lt;IMyTerminalBlock&gt;();int nZ=0;for(int i=0;i&lt;l.Count;i++){if(l[i].CustomName.Contains(nD)
                ||l[i].CustomData.Contains(nD)){nZ++;continue;}l2.Add(l[i]);}nJ=l2.ConvertAll(x=&gt;(IMyGyro)x);if(nG&gt;0)
                {if(nJ.Count&gt;nG){nJ.RemoveRange(nG,nJ.Count-nG);}else{if((nH-nZ)&gt;0){int hc=nJ.Count-(nH-nZ);nJ.RemoveRange(hc,
                (nH-nZ));}}}oa();s+="GYRO#"+nJ.Count.ToString("00")+"#";return s;}void oa(){if(nJ!=null){for(int i=0;
                i&lt;nJ.Count;++i){nJ[i].GyroOverride=false;nJ[i].Enabled=true;}}}public class ob{Dictionary&lt;string,string&gt;
                oc;Dictionary&lt;string,string[]&gt;od;Dictionary&lt;string,Dictionary&lt;string,string&gt;&gt;oe;char of='[';char og=
                ']';string oh="";MyGridProgram cv;string oi="";static string[]oj={"true","yes","on","1"};const StringComparison
                ok=StringComparison.OrdinalIgnoreCase;const char ol='=';public bool om{get;private set;}=false;public
                ob(MyGridProgram pg,string hu){cv=pg;oc=new Dictionary&lt;string,string&gt;();od=new Dictionary&lt;string,string[]&gt;();
                oe=new Dictionary&lt;string,Dictionary&lt;string,string&gt;&gt;();on(hu);}public int on(string hu){hu.TrimEnd();
                if(oi==hu){return oc.Count;}oc.Clear();od.Clear();oe.Clear();oh="";om=false;oi=hu;string[]oo=hu.Split('\n');
                for(int op=0;op&lt;oo.Count();op++){string oq="";oo[op].Trim();if(oo[op].StartsWith(of.ToString())){string
                cp="";for(int or=1;or&lt;oo[op].Length;or++)if(oo[op][or]==og)break;else cp+=oo[op][or];if(cp!=""){oq=cp.ToUpper();
                }else continue;op++;string os="";var ot=new string[oo.Count()-op];int ou=0;var ov=new Dictionary&lt;string,
                string&gt;();for(;op&lt;oo.Count();op++){oo[op].Trim();if(oo[op].StartsWith(of.ToString())){op--;break;}os
                +=oo[op]+"\n";ot[ou++]=oo[op];if(oo[op].Contains(ol)){string[]ow=oo[op].Split('=');if(ow.Count()&gt;1){
                string ox=ow[0];string J="";for(int i1=1;i1&lt;ow.Count();i1++){J+=ow[i1];if(i1+1&lt;ow.Count())J+=ol;}ov.Add(ox,
                J);}}}if(!oe.ContainsKey(oq))oe.Add(oq,ov);if(!od.ContainsKey(oq))od.Add(oq,ot);if(!oc.ContainsKey(oq))
                oc.Add(oq,os);}else{oh+=oo[op]+"\n";}}return oc.Count;}public string oy(string oz){string os="";if(oc.ContainsKey(oz))
                os=oc[oz];return os;}public string[]oA(string oz){string[]oB={""};if(od.ContainsKey(oz))oB=od[oz];return
                oB;}public bool oC(string oz,string ox,ref string oD,bool oE=false){oz=oz.ToUpper();if(oe.ContainsKey(oz))
                {var oF=oe[oz];if(oF.ContainsKey(ox)){oD=oF[ox];return true;}}if(oE)oP(oz,ox,oD);return false;}public
                bool oC(string oz,string ox,ref long oG,bool oE=false){string oH="";if(!oC(oz,ox,ref oH)){if(oE){oP(oz,
                ox,oG);}return false;}oG=Convert.ToInt64(oH);return true;}public bool oC(string oz,string ox,ref int
                oI,bool oE=false){string oH="";if(!oC(oz,ox,ref oH)){if(oE){oP(oz,ox,oI);}return false;}oI=Convert.ToInt32(oH);
                return true;}public bool oC(string oz,string ox,ref double oJ,bool oE=false){string oH="";if(!oC(oz,
                ox,ref oH)){if(oE){oP(oz,ox,oJ);}return false;}bool oK=double.TryParse(oH,out oJ);return true;}public
                bool oC(string oz,string ox,ref float oL,bool oE=false){string oH="";if(!oC(oz,ox,ref oH)){if(oE){oP(oz,
                ox,oL.ToString());}return false;}bool oK=float.TryParse(oH,out oL);return true;}public bool oC(string
                oz,string ox,ref DateTime oM,bool oE=false){string oH="";if(!oC(oz,ox,ref oH)){if(oE){oP(oz,ox,oM);}
                return false;}oM=DateTime.Parse(oH);return true;}public bool oC(string oz,string ox,ref Vector3D oN,
                bool oE=false){string oH="";if(!oC(oz,ox,ref oH)){if(oE){oP(oz,ox,oN);}return false;}double x1,y1,z1;
                hJ(oH,out x1,out y1,out z1);oN.X=x1;oN.Y=y1;oN.Z=z1;return true;}public bool oC(string oz,string ox,
                ref bool oO,bool oE=false){string oH="";if(!oC(oz,ox,ref oH)){if(oE){oP(oz,ox,oO);}return false;}oO=
                oj.Any(c=&gt;string.Equals(oH,c,ok));return true;}public bool oP(string section,string key,string oH){if
                (oc.ContainsKey(section)){oc[section]="";}else{oc.Add(section,"");om=true;}if(oe.ContainsKey(section))
                {var ov=new Dictionary&lt;string,string&gt;();var oF=oe[section];if(oF.ContainsKey(key)){if(oF[key]==oH)return
                false;oF[key]=oH;}else{oF.Add(key,oH);}om=true;}else{var ov=new Dictionary&lt;string,string&gt;();ov.Add(key,
                oH);oe.Add(section,ov);om=true;}return true;}public bool oP(string oz,string ox,Vector3D oN){oP(oz,ox,
                hI(oN));return true;}public bool oP(string oz,string ox,bool oO){oP(oz,ox,oO.ToString());return true;
                }public bool oP(string oz,string ox,int oQ){oP(oz,ox,oQ.ToString());return true;}public bool oP(string
                oz,string ox,long oR){oP(oz,ox,oR.ToString());return true;}public bool oP(string oz,string ox,DateTime
                oM){oP(oz,ox,oM.ToString());return true;}public bool oP(string oz,string ox,float oL){oP(oz,ox,oL.ToString());
                return true;}public bool oP(string oz,string ox,double oJ){oP(oz,ox,oJ.ToString());return true;}public
                void oS(string oz,string os){os.TrimEnd();oz=oz.ToUpper();if(oc.ContainsKey(oz)){if(oc[oz]!=os){oc[oz]
                =os;om=true;}}else{om=true;oc.Add(oz,os);}}public string oT(bool oU=true){string oV="";string s1=oh.Trim();
                if(s1!="")oV=s1+"\n";foreach(var kv in oc){oV+=of+kv.Key.Trim()+og+"\n";if(kv.Value.TrimEnd()==""){string
                oW="";if(oe.ContainsKey(kv.Key)){foreach(var dk in oe[kv.Key]){oW+=dk.Key+ol+dk.Value+"\n";}}oW+="\n";
                oV+=oW;}else{oV+=kv.Value.Trim()+"\n\n";}}if(oU){om=false;oi=oV;}return oV;}bool hJ(string hK,out double
                x,out double y,out double z){string[]hk=hK.Trim().Split(',');if(hk.Length&lt;3){hk=hK.Trim().Split(':');
                }x=0;y=0;z=0;if(hk.Length&lt;3)return false;bool hn=double.TryParse(hk[0].Trim(),out x);bool ho=double.TryParse(hk[1].Trim(),
                out y);bool hp=double.TryParse(hk[2].Trim(),out z);if(!hn||!ho||!hp){return false;}return true;}string
                hI(Vector3D v){string s;s=v.X.ToString("0.00")+":"+v.Y.ToString("0.00")+":"+v.Z.ToString("0.00");return
                s;}}List&lt;IMyTerminalBlock&gt;oX=new List&lt;IMyTerminalBlock&gt;();string oY(){oX.Clear();oX=ns&lt;IMyLightingBlock&gt;();
                return"L"+oX.Count.ToString("00");}void oZ(List&lt;IMyTerminalBlock&gt;oX,Color c){for(int i=0;i&lt;oX.Count;
                i++){var pa=oX[i]as IMyLightingBlock;if(pa==null)continue;if(pa.Color.Equals(c)&amp;&amp;pa.Enabled){continue;
                }pa.Color=c;}}List&lt;IMySensorBlock&gt;pb=new List&lt;IMySensorBlock&gt;();string pc="[WICO]";double pd=0.125;const
                string pe="SENSORS";void pf(ob f){f.oC(pe,"SensorUse",ref pc,true);f.oC(pe,"SensorSettleWaitMS",ref pd,
                true);}string pg(bool ph=true){pb.Clear();List&lt;IMyTerminalBlock&gt;pi=nv&lt;IMySensorBlock&gt;(pc);foreach(var
                sb1 in pi){pb.Add(sb1 as IMySensorBlock);}if(ph)pl();return"S"+pb.Count.ToString("00");}List&lt;IMySensorBlock&gt;
                pj(string pk=null){List&lt;IMySensorBlock&gt;pj=new List&lt;IMySensorBlock&gt;();for(int i1=0;i1&lt;pb.Count;i1++){
                IMySensorBlock s=pb[i1]as IMySensorBlock;if(s==null)continue;if(s.IsActive&amp;&amp;s.Enabled&amp;&amp;!s.LastDetectedEntity.IsEmpty())
                {pj.Add(pb[i1]);}}return pj;}void pl(){for(int i1=0;i1&lt;pb.Count;i1++){IMySensorBlock pm=pb[i1]as IMySensorBlock;
                if(pm==null)continue;pm.LeftExtend=pm.RightExtend=pm.TopExtend=pm.BottomExtend=pm.FrontExtend=pm.BackExtend
                =1;pm.Enabled=false;}}void pn(IMyTerminalBlock tb,float po,float pp,float pq,float pr,float ps,float
                pt){IMySensorBlock pm=tb as IMySensorBlock;if(pm==null)return;float pu=pm.Position.X*0.5f;float pv=pm.Position.Y
                *0.5f;float pw=pm.Position.Z*0.5f;Echo("SB.x.y.z="+pu.ToString("0.0")+":"+pv.ToString("0.0")+":"+pw.ToString("0.0"));
                Echo("MIN="+Me.CubeGrid.Min.ToString()+"\nMAX:"+Me.CubeGrid.Max.ToString());float px;px=(float)(hL.ic()
                /2-pu+po);pm.LeftExtend=Math.Max(px,1.0f);px=(float)(hL.ic()/2+pu+pp);pm.RightExtend=Math.Max(px,1.0f);
                px=(float)(hL.ie()/2-pv+pq);pm.TopExtend=Math.Max(px,1.0f);px=(float)(hL.ie()/2+pv+pr);pm.BottomExtend
                =Math.Max(px,1.0f);px=(float)(hL.ia()+pw+ps);pm.FrontExtend=Math.Max(px,1.0f);px=(float)(hL.ia()-pw+
                pt);pm.BackExtend=Math.Max(px,1.0f);pm.Enabled=true;}bool py(IMySensorBlock s1,ref bool pz,ref bool pA,
                ref bool pB){pz=false;pA=false;pB=false;if(s1!=null&amp;&amp;s1.IsActive&amp;&amp;s1.Enabled&amp;&amp;!s1.LastDetectedEntity.IsEmpty())
                {List&lt;MyDetectedEntityInfo&gt;pC=new List&lt;MyDetectedEntityInfo&gt;();s1.DetectedEntities(pC);for(int j1=0;
                j1&lt;pC.Count;j1++){if(pC[j1].Type==MyDetectedEntityType.Asteroid){pz=true;}else if(pC[j1].Type==MyDetectedEntityType.LargeGrid)
                {pA=true;}else if(pC[j1].Type==MyDetectedEntityType.SmallGrid){pB=true;}}}return pz||pA||pB;}List&lt;IMyTerminalBlock&gt;
                pD=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;pE=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                pF=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;pG=new List&lt;IMyTerminalBlock&gt;();string pH(IMyTerminalBlock
                cj){pD.Clear();pE.Clear();pF.Clear();pG.Clear();ns&lt;IMyMotorSuspension&gt;(ref pD);for(int i=0;i&lt;pD.Count;
                i++){if(pD[i].CustomName.Contains("[SLED]")||pD[i].CustomData.Contains("[SLED]")){pE.Add(pD[i]);if(pD[i].CustomName.Contains("[REAR]")
                ||pD[i].CustomData.Contains("[FRONT]")){pF.Add(pD[i]);}if(pD[i].CustomName.Contains("[FRONT]")||pD[i].CustomData.Contains("[FRONT]"))
                {pG.Add(pD[i]);}}}return"W"+pD.Count.ToString("0")+"WS"+pE.Count.ToString("0")+"SR"+pF.Count.ToString("0")
                +"SF"+pG.Count.ToString("0");}bool pI(){if(pE.Count&gt;0)return true;return false;}void pJ(){for(int i1
                =0;i1&lt;pE.Count;i1++){var w1=pE[i1]as IMyMotorSuspension;w1.SetValueFloat("Friction",0);}}
              </Program>
              <Storage>
                [NAV]
                vTarget=0.00:0.00:0.00
                ValidNavTarget=False
                dStartShip=01/01/0001 00:00:00
                shipSpeedMax=100
                arrivalDistanceMin=50

                [WCCM2]
                Mode=0
                current_state=0
                PassedArgument=
                AlertStates=0
                craft_operation=0
                ReceivedMessage=
                SaveID=0

              </Storage>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>101689890024081989</EntityId>
              <Min x="1" y="7" z="9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.2" y="-0.22" z="-0.45" />
              <CustomName>PB Wico Craft Spare</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>
                public Program()
                {
                // The constructor, called only once every session and
                // always before any other method is called. Use it to
                // initialize your script.
                //
                // The constructor is optional and can be removed if not
                // needed.
                //
                // It's recommended to set RuntimeInfo.UpdateFrequency
                // here, which will allow your script to run itself without a
                // timer block.
                }

                public void Save()
                {
                // Called when the program needs to save its state. Use
                // this method to save your state to the Storage field
                // or some other means.
                //
                // This method is optional and can be removed if not
                // needed.
                }

                public void Main(string argument, UpdateType updateSource)
                {
                // The main entry point of the script, invoked every time
                // one of the programmable block's Run actions are invoked,
                // or the script updates itself. The updateSource argument
                // describes where the update came from.
                //
                // The method itself is required, but the arguments above
                // can be removed if not needed.
                }
              </Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>119523483597591719</EntityId>
              <Min x="-1" y="7" z="9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.2" y="-0.22" z="-0.45" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>
                              [WORLD]
                              MaxWorldMps=100

                              [GRIDS]
                              NoFollow=NOFOLLOW
                              BlockIgnore=!WCC
                              OrientationBlockContains=[NAV]
                              OrientationBlockNamed=Craft Remote Control
                              GyroIgnore=!NAV
                              LIMIT_GYROS=3
                              LEAVE_GYROS=-1

                              [LOGGING]
                              TextPanelReport=Craft Report
                              StatusName=Wico Craft Status
                              LongStatus=Wico Craft Log
                              RangeReport=[RANGE]
                              SledReport=[SMREPORT]
                              GPSTag=[GPS]

                              [CONNECTORS]
                              BaseConnector=[BASE]
                              DockConnector=[DOCK]
                              GearUse=[DOCK]

                              [CAMERAS]
                              CameraViewOnly=[VIEW]

                              [POWER]
                              batterypcthigh=80
                              batterypctlow=20

                              [CARGO]
                              cargopctmin=5

                              [WICO CRAFT]
                              EchoOn=True

                            </Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB Wico Craft Main Sled</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>
                /*
                * Wico craft controller Master Control Script
                *
                * Control Script for Rovers and Drones and Oribtal craft
                *
                * Uncompressed source for this script here: https://github.com/Wicorel/SpaceEngineers/tree/master/MDK%20Craft%20Control
                *
                *
                * Handles:
                * Master timer for sub-modules
                * Calculates ship speed and vectors (obsolete)
                * Calculates simspeed (obsolete)
                * Configure craft_operation settings
                * making sure antenna doesn't get turned off (bug in SE turn off antenna when trying to remotely connect to grid)
                *
                * Calculates cargo and power percentages and cargo multiplier and hydro fill and oxy tank fill
                *
                * Detects grid changes and initiates re-init
                *
                * *
                * MODE_IDLE
                * MODE_ATTENTION
                *
                * Commands:
                *
                * setsimspeed &lt;value&gt;: sets the current simspeed so the calculations can be accurate. (obsolete)
                * init: re-init all blocks
                * idle : force MODE_IDLE
                * coast: turns on/off backward thrusters
                * setvaluef &lt;blockname&gt;:&lt;property&gt;:&lt;value&gt;  -&gt; sets specified block's property to specified value
                * Example:
                *  setvaluef Advanced Rotor:UpperLimit:-24
                *
                * Need:

                * Want:
                *
                * menu management for commands (including sub-modules)
                *
                * minimize serialized data and make sub-modules pass their own seperately, OR support extra data in state
                *
                * common function for 'handle this' combining 'me' grid and an exclusion name check
                *
                * multi-script handling for modes
                *
                * * advanced trigger: only when module handles that mode... (so need mode-&gt;module dictionary)
                * override base modes?
                *
                *
                *
                * WANT:
                * setvalueb
                * Actions
                * Trigger timers on 'events'.
                * set antenna name to match mode?
                * *
                * 2.0 Removed many built-in functions to make script room. These functions were duplicated in sub-modules anyway.
                * 2.0.1
                * 0.2 Remove items from serialize that main control no longer calculates (cargo, battery, etc).
                * if simspeed&gt;1.01, assume 1.0 and recalculate.
                * 0.3 re-org code sections
                * Pass arguments to sub-modules
                * 0.4 (re)integrate power and cargo
                * 0.4a process multiple arguments on a command line
                * 0.4b check mass change and request reinit including sub-modules.
                *
                * 2.1 Code Reorg
                * Cache all blocks and grids.  Support for multi-grid constructions.
                * !Needs handling for grids connected via connectors..
                *
                * .1a Don't force re-init on working projector.
                * .1b Add 'brake' command
                * Add braking for sleds (added wheelinit)
                *
                * 2.2 PB changes in 1.172
                *
                * .2a Added modes. Default PB name
                *
                * 2.3 Start to add Power information
                *
                * .3a Add drills and ejectors to reset motion. Add welders, drills, connectors and grinders to cargo check.
                * don't set PB name because it erases settings.. :(
                *
                * .3b getblocks fixes when called before gridsinit
                *
                * 3.0 remove older items from serialize that are no longer needed
                * removed NAV support
                * fixed battery maxoutput values
                *
                * 3.0a support no remote control blocks. Check for Cryo when getting default controller.
                * 3.0b sBanner
                * 3.0c caching optimizations
                * 3.0d fix connectorsanyconnectors not using localdock
                * 3.0e Add Master Reset command
                * 3.0f
                * check for grid changes and re-init
                * rotor NOFOLLOW
                * ignore projectors with !WCC in name or customdata
                * ignore 'cutter' thrusters
                *
                * 3.0g Fix problem with allBlockCount being loaded after it has changed
                *
                * 3.0H
                * fix problems with docking/undocking and perm re-init
                *
                * 05/13: fix GetBlocksContains&lt;T&gt;()
                *
                * 3.0I MDK Version 08/20/2017   MDK: https://github.com/malware-dev/MDK-SE/
                * Uncompressed source for this script here: https://github.com/Wicorel/SpaceEngineers/tree/master/MDK%20Craft%20Control
                *
                * 3.0J Add moduleDoPreModes() to Main()
                * Move pre-mode to moduleDoPreModes()
                * add clearing of gpsPanel to moduleDoPreModes()
                *
                * 3.0K more init states if larger number of blocks in grid system.
                *
                * 3.0K2  search order for text panels
                *
                * 3.1 Verison for SE 1.185 PB Major changes
                *
                * 3.1A init cycle optimizations
                *
                * 3.1B Handle no controller (stations, etc)
                * 12092017
                *
                * 3.1C 12132017
                * don't count ejectors in cargo%
                * fix bug in DoTriggerMain() causing updates to stop
                *
                * 3.1D Section processing for save information (text panels)
                * fix bug in serialize wrting z,y z, instead of x,y,z (oops)
                *
                * 3.2 INI WCCM 01062018
                *
                * 3.2A
                * FilledRatio Change
                *
                * 3.2B Lots of INI processing
                *
                * 3.3 Handle multiple output panels.
                * Only write to panels at end
                *
                * 3.3A Redo Serlialize.
                * Module Serlialize
                *
                * 3.4
                * add namecameras
                *
                * 3.4a
                * init optimizations for text panels
                *
                * 3.4B turn off auto-pirate mode.
                *
                */
                string a="Wico Craft";string b="Master";string c="3.4B";const string d="0.00";double e=2;double f=-1;
                double g=5;double h=-1;void i(){fr("clear",fb);fr("clear",gpsPanel);string j="";if(fX&gt;0){j+="Ship\n";
                }else{j+="Station\n";}if(la())j+="Connected";else j+="Not Connected";if(kY())j+="\nLocked";else j+=" : Not Locked";
                Echo(j);fD(j);j="";if(lv)Echo("FAST!");if(f&gt;e){f=0;dr();}else{if(f&lt;0){f=e+5;}f+=Runtime.TimeSinceLastRun.TotalSeconds;
                }Echo("Cargo="+dd.ToString()+"%");if(h&gt;g){h=0;bw(0,false);}else{if(h&lt;0){h=g+5;}h+=Runtime.TimeSinceLastRun.TotalSeconds;
                }j+="Batteries: #="+bo.Count.ToString();if(bo.Count&gt;0&amp;&amp;bm&gt;0){j+=" : "+(bv()/bm*100).ToString("0.00")
                +"%";j+="\n Storage="+batteryPercentage.ToString()+"%";}Echo(j);j="";Echo("Solar: #"+iy.Count.ToString()
                +" "+iz.ToString("0.00"+"MW"));float k=0;hZ(out k);if(hV.Count&gt;0){j="Reactors: #"+hV.Count.ToString();
                j+=" - "+hU.ToString("0.00")+"MW\n";float l=(float)(k/op*100);j+=" Curr Output="+k.ToString("0.00")+
                "MW"+" : "+l.ToString("0.00")+"%";}Echo(j);j="";Echo("TotalMaxPower="+op.ToString("0.00"+"MW"));TanksCalculate();
                if(es&gt;=0){Echo("O:"+es.ToString("000.0%"));}else Echo("No Oxygen Tanks");if(er&gt;=0){Echo("H:"+er.ToString("000.0%"));
                }else Echo("No Hydrogen Tanks");if(ee.Count&gt;0){Echo(ee.Count+" Gas Gens");}if(lD&gt;=0){Echo("Grav="+lD.ToString(d));
                fD("Planet Gravity "+lD.ToString(d)+" g");fD(fE((int)(lD/1.1*100)));}else fD("ERROR: No Remote Control found!");
                fr("clear",gpsPanel);}void m(){lI();}void n(bool o=false){jF(iD);nq();hF(hu);hF(hv);if(mN is IMyRemoteControl)
                ((IMyRemoteControl)mN).SetAutoPilotEnabled(false);if(mN is IMyShipController)((IMyShipController)mN).DampenersOverride
                =true;if(!o)lO();}void p(){ec();n();@in=0;io="";sPassedArgument="init";iniWicoCraftSave.nD("");ib();
                lv=true;}void q(){il=dC;if((il&amp;dM)==dC){int r=0;if(Me.CustomName.ToLower().Contains("nad"))il|=dI;if
                (Me.CustomName.ToLower().Contains("rotor"))il|=dE;else if(Me.CustomName.ToLower().Contains("sled"))il
                |=CRAFT_MODE_SLED;if(iQ&gt;0){r++;}if(iR&gt;0){r++;}if(iS&gt;0){r++;}if(hu.Count&gt;0&amp;&amp;hv.Count&gt;0)il|=dE;if(ou.Count
                &gt;0&amp;&amp;r&gt;0)il|=CRAFT_MODE_SLED;if(r&gt;1||Me.CustomName.ToLower().Contains("orbital"))il|=CRAFT_MODE_ORBITAL;
                if(Me.CustomName.ToLower().Contains("rocket"))il|=dG;if(Me.CustomName.ToLower().Contains("pet"))il|=
                dH;if(Me.CustomName.ToLower().Contains("noautogyro"))il|=dJ;if(Me.CustomName.ToLower().Contains("nopower"))
                il|=dK;if(Me.CustomName.ToLower().Contains("notank"))il|=dL;}}void s(){string j="";j+=ly.ToString(d)
                +" m/s";j+=" ("+(ly*3.6).ToString(d)+"km/h)";fD(j);}void t(nr u){}void v(nr u){}List&lt;z&gt;w=new List&lt;z&gt;();
                string x="";const string y="ASTEROIDS";public class z{public long A;public BoundingBoxD B;public Vector3D
                C{get{return B.Center;}}}void D(){if(iniWicoCraftSave==null)return;string S1="";S1+=w.Count+"\n";for
                (int i=0;i&lt;w.Count;i++){S1+=w[i].A.ToString()+"\n";S1+=ir(w[i].B.Min)+"\n";S1+=ir(w[i].B.Max)+"\n";}
                if(x!=S1){iniWicoCraftSave.oi(y,S1);}else{}}void E(){if(iniWicoCraftSave==null)return;string F;F=iniWicoCraftSave.nO(y);
                if(F.Length&lt;1){return;}if(F==x){return;}w.Clear();double x1,y1,z1;x=F;string[]G=F.Split('\n');int H=
                0;int I=-1;if(G.Length&lt;2)return;I=Convert.ToInt32(G[H++]);for(int j=0;j&lt;I;j++){long J;J=Convert.ToInt64(G[H++]);
                BoundingBoxD K;@is(G[H++],out x1,out y1,out z1);K.Min=new Vector3D(x1,y1,z1);@is(G[H++],out x1,out y1,
                out z1);K.Max=new Vector3D(x1,y1,z1);z L=new z();L.A=J;L.B=K;w.Add(L);}}void M(){w.Clear();E();}void
                N(long O,BoundingBoxD K,bool P=true){bool Q=false;for(int i=0;i&lt;w.Count;i++){if(w[i].A==O){Q=true;break;
                }}if(!Q){z ai=new z();ai.A=O;ai.B=K;w.Add(ai);D();if(P){kG("WICO:AST:"+ih.EntityId.ToString()+":"+O.ToString()
                +":"+ir(K.Min)+":"+ir(K.Max));}}}void N(MyDetectedEntityInfo R,bool P=true){if(R.IsEmpty()||R.Type!=
                MyDetectedEntityType.Asteroid)return;N((long)R.EntityId,R.BoundingBox,P);}bool S(List&lt;MyDetectedEntityInfo&gt;
                T){bool U=false;for(int j=0;j&lt;T.Count;j++){if(T[j].Type==MyDetectedEntityType.Asteroid){if(V(T[j]))U
                =true;}}return U;}bool V(MyDetectedEntityInfo dei){dW(dei);bool U=false;if(dei.Type==MyDetectedEntityType.Asteroid)
                {N(dei);U=true;}return U;}long X(bool Y=false){long Z=-1;if(mN==null)return Z;if(w.Count&lt;1)E();double
                ba=double.MaxValue;foreach(var ast in w){if(Y){if(ast.B.Contains(mN.GetPosition())==ContainmentType.Contains)
                {Z=ast.A;}}else{double bb=Vector3D.DistanceSquared(ast.C,mN.GetPosition());if(bb&lt;ba){Z=ast.A;ba=bb;}
                }}return Z;}Vector3D bc(long Z){if(w.Count&lt;1)E();Vector3D bd=new Vector3D(0,0,0);for(int i=0;i&lt;w.Count;
                i++){if(w[i].A==Z)bd=w[i].C;}return bd;}BoundingBoxD be(long Z){if(w.Count&lt;1)E();BoundingBoxD K=new BoundingBoxD();
                for(int i=0;i&lt;w.Count;i++){if(w[i].A==Z)K=w[i].B;}return K;}bool bf(string bg){double x1,y1,z1;string[]
                bh=bg.Trim().Split(':');if(bh.Length&gt;1){if(bh[0]!="WICO"){Echo("not wico system message");return false;
                }if(bh.Length&gt;2){if(bh[1]=="AST"){int bi=2;long id=0;long.TryParse(bh[bi++],out id);long bj=0;long.TryParse(bh[bi++],
                out bj);x1=Convert.ToDouble(bh[bi++]);y1=Convert.ToDouble(bh[bi++]);z1=Convert.ToDouble(bh[bi++]);Vector3D
                bk=new Vector3D(x1,y1,z1);x1=Convert.ToDouble(bh[bi++]);y1=Convert.ToDouble(bh[bi++]);z1=Convert.ToDouble(bh[bi++]);
                Vector3D bl=new Vector3D(x1,y1,z1);BoundingBoxD K=new BoundingBoxD(bk,bl);N(bj,K,false);return true;
                }else if(bh[1]=="AST?"){}}}return false;}double bm=-1;int batteryPercentage=-1;List&lt;IMyTerminalBlock&gt;
                bo=new List&lt;IMyTerminalBlock&gt;();bool bp(IMyTerminalBlock bq){if(bq is IMyBatteryBlock){IMyBatteryBlock
                br=bq as IMyBatteryBlock;return br.OnlyRecharge;}else return false;}bool bs(IMyTerminalBlock bq){if(bq
                is IMyBatteryBlock){IMyBatteryBlock br=bq as IMyBatteryBlock;return br.OnlyDischarge;}else return false;
                }bool bt(IMyTerminalBlock bq){if(bq is IMyBatteryBlock){IMyBatteryBlock br=bq as IMyBatteryBlock;return
                br.IsCharging;}else return false;}void bu(){bo.Clear();batteryPercentage=-1;bm=-1;GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt;(bo,
                mz);if(bo.Count&gt;0)bm=0;foreach(var tb in bo){IMyBatteryBlock r=tb as IMyBatteryBlock;bm+=r.MaxOutput;
                }}double bv(){double j=0;foreach(var tb in bo){IMyBatteryBlock r=tb as IMyBatteryBlock;j+=r.CurrentOutput;
                }return j;}bool bw(int bx,bool by=true,bool bz=false){float bA=0;float bB=0;bool bC=false;float f1;if
                (bo.Count&lt;1)bu();if(bo.Count&lt;1)return false;batteryPercentage=0;for(int ib=0;ib&lt;bo.Count;ib++){float
                bD=0;float bE=0;int bF=100;IMyBatteryBlock b;b=bo[ib]as IMyBatteryBlock;f1=b.MaxStoredPower;bE+=f1;bA
                +=f1;f1=b.CurrentStoredPower;bD+=f1;bB+=f1;if(bE&gt;0){f1=((bD*100)/bE);f1=(float)Math.Round(f1,0);bF=(int)f1;
                }string s;s="";if(bp(bo[ib]))s+="R";else if(bs(bo[ib]))s+="D";else s+="a";float bG;bG=b.CurrentInput;
                if(bG&gt;0)s+="+";else s+=" ";bG=b.CurrentOutput;if(bG&gt;0)s+="-";else s+=" ";s+=bF+"%";s+=":"+bo[ib].CustomName;
                if(by)Echo(s);if(bp(bo[ib])&amp;&amp;bx&gt;0){if(bF&lt;bx)bC=true;else if(bF&gt;99)b.OnlyRecharge=false;}if(!b.OnlyRecharge
                &amp;&amp;bF&lt;bx&amp;&amp;!bC){b.OnlyDischarge=false;b.OnlyRecharge=true;b.SemiautoEnabled=false;bC=true;}}if(bA&gt;0){f1
                =((bB*100)/bA);f1=(float)Math.Round(f1,0);batteryPercentage=(int)f1;}else batteryPercentage=-1;return
                bC;}void bH(bool by=false,bool bI=true){Echo(bo.Count+" Batteries");string s;for(int i=0;i&lt;bo.Count;
                i++){IMyBatteryBlock b;b=bo[i]as IMyBatteryBlock;b.OnlyRecharge=!bI;b.OnlyDischarge=bI;b.SemiautoEnabled
                =false;s=b.CustomName+": ";if(b.OnlyRecharge){s+="RECHARGE/";}else s+="NOTRECHARGE/";if(b.OnlyDischarge)
                {s+="DISCHARGE";}else{s+="NOTDISCHARGE";}if(by)Echo(s);}}void bJ(List&lt;IMyTerminalBlock&gt;bK,bool bL=true)
                {foreach(var b in bK){IMyFunctionalBlock f=b as IMyFunctionalBlock;if(f==null)continue;f.Enabled=bL;
                }}void bM(List&lt;IMyTerminalBlock&gt;bK){foreach(var b in bK){IMyFunctionalBlock f=b as IMyFunctionalBlock;
                if(f==null)continue;f.Enabled=!f.Enabled;}}string bN="[VIEW]";Matrix bO=new Matrix(1,0,0,0,0,1,0,0,0,
                0,1,0,0,0,0,1);List&lt;IMyTerminalBlock&gt;bP=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;bQ=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;bR=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;bS=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;bT=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;bU=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;bV=new List&lt;IMyTerminalBlock&gt;();IMyTerminalBlock bW=null;private MyDetectedEntityInfo
                bX;string bY="CAMERAS";void bZ(nr u){u.nS(bY,"CameraViewOnly",ref bN,true);}bool ca(List&lt;IMyTerminalBlock&gt;
                cb,double cc=100,float cd=0,float ce=0){double cf=0;bW=null;for(int i=0;i&lt;cb.Count;i++){double cg=((IMyCameraBlock)cb[i]).AvailableScanRange;
                if(cg&gt;cf){cf=cg;bW=cb[i];}}var ch=bW as IMyCameraBlock;if(bW==null){return false;}if(ch.CanScan(cc))
                {bX=ch.Raycast(cc,cd,ce);bW=ch;if(!bX.IsEmpty())dW(bX);return true;}else{}return false;}bool ca(List&lt;IMyTerminalBlock&gt;
                cb,Vector3D ci){double cf=0;bW=null;for(int i=0;i&lt;cb.Count;i++){double cg=((IMyCameraBlock)cb[i]).AvailableScanRange;
                if(cg&gt;cf){cf=cg;bW=cb[i];}}var ch=bW as IMyCameraBlock;if(bW==null)return false;{bX=ch.Raycast(ci);bW
                =ch;if(!bX.IsEmpty())dW(bX);return true;}}double cj(List&lt;IMyTerminalBlock&gt;cb){double ck=0;for(int i=
                0;i&lt;cb.Count;i++){IMyCameraBlock ch=cb[i]as IMyCameraBlock;if(ck&lt;ch.AvailableScanRange)ck=ch.AvailableScanRange;
                }return ck;}string cl(IMyTerminalBlock cm){bP.Clear();bQ.Clear();bR.Clear();bS.Clear();bT.Clear();bU.Clear();
                bV.Clear();if(cm==null)return"\nCameras:No OrientationBlock";GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt;(bV,
                (x1=&gt;x1.CubeGrid==Me.CubeGrid));Matrix cn;cm.Orientation.GetMatrix(out cn);Matrix.Transpose(ref cn,out
                cn);for(int i=0;i&lt;bV.Count;++i){if(bV[i].CustomName.Contains(bN))continue;IMyCameraBlock ch=bV[i]as IMyCameraBlock;
                ch.EnableRaycast=true;Matrix co;ch.Orientation.GetMatrix(out co);Vector3 cp=Vector3.Transform(co.Forward,
                cn);if(cp==bO.Left){bT.Add(bV[i]);}else if(cp==bO.Right){bU.Add(bV[i]);}else if(cp==bO.Backward){bQ.Add(bV[i]);
                }else if(cp==bO.Forward){bP.Add(bV[i]);}else if(cp==bO.Up){bS.Add(bV[i]);}else if(cp==bO.Down){bR.Add(bV[i]);
                }}string s;s="CS:&lt;";s+="F"+bP.Count.ToString("00");s+="B"+bQ.Count.ToString("00");s+="D"+bR.Count.ToString("00");
                s+="U"+bS.Count.ToString("00");s+="L"+bT.Count.ToString("00");s+="R"+bU.Count.ToString("00");s+="&gt;";
                return s;}void cq(List&lt;IMyTerminalBlock&gt;cb,string cr){string cs;for(int i=0;i&lt;cb.Count;i++){if(!cb[i].CustomName.Contains(cr))
                {cs="Camera ";if(cb.Count&gt;1)cs+=(i+1).ToString()+" ";cs+=cr;cb[i].CustomName=cs;}}}List&lt;IMyTerminalBlock&gt;
                ct=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;cu=new List&lt;IMyTerminalBlock&gt;();string cv(IMyTerminalBlock
                cm){string s="";if(bV.Count&lt;1)s+=cl(cm);ct.Clear();cu.Clear();foreach(var camera in bR){if(camera.CustomName.ToLower().Contains("fore")
                ||camera.CustomData.ToLower().Contains("fore"))ct.Add(camera);else if(camera.CustomName.ToLower().Contains("aft")
                ||camera.CustomData.ToLower().Contains("aft"))cu.Add(camera);}s+="HCS:&lt;";s+="F"+ct.Count.ToString("00");
                s+="A"+cu.Count.ToString("00");s+="&gt;";return s;}public class cw{bool cx=false;Program cy;public double
                cz=1250;double cA=5000;float cB=25f;float cC=25f;double cD=5;float cE=3;float cF=0.5f;float cG=0;float
                cH=0;float cI=0;float cJ=0;List&lt;IMyTerminalBlock&gt;cK=new List&lt;IMyTerminalBlock&gt;();private int cL=0;private
                int cM=1;public MyDetectedEntityInfo bX;public List&lt;MyDetectedEntityInfo&gt;cN=new List&lt;MyDetectedEntityInfo&gt;();
                public IMyTerminalBlock bW=null;public cw(Program pg,List&lt;IMyTerminalBlock&gt;bK,double cO=1250,float cP
                =45f,float cQ=45f,float cR=2,float cS=1,float cT=0.5f,double cU=5000){cy=pg;cx=false;cK.Clear();cN.Clear();
                bX=new MyDetectedEntityInfo();foreach(var b in bK){if(b is IMyCameraBlock){cK.Add(b);IMyCameraBlock c
                =b as IMyCameraBlock;c.EnableRaycast=true;if(cB&gt;c.RaycastConeLimit)cB=c.RaycastConeLimit;if(cC&gt;c.RaycastConeLimit)
                cC=c.RaycastConeLimit;}}if(cO&gt;cU)cU=cO;cz=cO;cB=cP;cC=cQ;cD=cR;cE=cS;cF=cT;cA=cU;cG=0;cH=0;cI=0;cJ=0;
                cL=0;cM=cK.Count;}public bool cV(){return cx;}void cW(MyDetectedEntityInfo bX){bool cX=true;for(int i
                =0;i&lt;cN.Count;i++){if(cN[i].EntityId==bX.EntityId)cX=false;}if(cX){cN.Add(bX);}}public bool cY(){if(cK.Count
                &lt;1)cx=true;if(cx)return false;bool cZ=false;for(int da=0;da&lt;cM;da++){if(cy.ca(cK,cz,cJ,cI)){bX=cy.bX;
                if(!bX.IsEmpty()){bool db=true;if((bX.Type==MyDetectedEntityType.LargeGrid)||(bX.Type==MyDetectedEntityType.SmallGrid))
                {if(cy.IsGridLocal(bX.EntityId)){db=false;}}if(db){cy.fV+="\nDoScan HIT!";cW(bX);cZ=true;}}cL++;if(cJ
                ==0&amp;&amp;cI==0){cG=cF;cH=cF;cL=0;}if(cL&gt;3){cL=0;cH+=Math.Abs(cH/cE)+cF;if(Math.Abs(cH)&gt;cB){cL=0;cH=0;cG+=
                Math.Abs(cG/cE)+cF;}if(Math.Abs(cG)&gt;cC){cG=0;cH=0;cL=0;{cz*=cD;if(cz&gt;cA){cx=true;return false;}}}}switch
                (cL){case 0:cJ=cG;cI=cH;break;case 1:cJ=-cG;cI=cH;break;case 2:cJ=cG;cI=-cH;break;case 3:cJ=-cG;cI=-cH;
                break;}}}return cZ;}}int dc=5;int dd=-1;double de=-1;string df="CARGO";void dg(nr u){u.nS(df,"cargopctmin",
                ref dc,true);}List&lt;IMyTerminalBlock&gt;dh=null;bool di=false;double dj=0.0;void dk(){var bK=new List&lt;IMyTerminalBlock&gt;();
                if(dh==null)dh=new List&lt;IMyTerminalBlock&gt;();else dh.Clear();mG&lt;IMyCargoContainer&gt;(ref bK);dh.AddRange(bK);
                dd=-1;de=-1;}void dl(){var bK=new List&lt;IMyTerminalBlock&gt;();mG&lt;IMyShipConnector&gt;(ref bK);foreach(var c
                in bK){if(c.CustomName.Contains("Ejector")||c.CustomData.Contains("Ejector"))continue;else dh.Add(c);
                }}void dm(){var bK=new List&lt;IMyTerminalBlock&gt;();mG&lt;IMyShipDrill&gt;(ref bK);dh.AddRange(bK);}void dn(){
                var bK=new List&lt;IMyTerminalBlock&gt;();mG&lt;IMyShipWelder&gt;(ref bK);dh.AddRange(bK);}void@do(){var bK=new List&lt;IMyTerminalBlock&gt;();
                mG&lt;IMyShipGrinder&gt;(ref bK);dh.AddRange(bK);}bool dp=true;void dq(){var bK=new List&lt;IMyTerminalBlock&gt;();
                if(dh==null)dh=new List&lt;IMyTerminalBlock&gt;();else dh.Clear();if(!dp)GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt;(bK,
                mz);else mG&lt;IMyCargoContainer&gt;(ref bK);dh.AddRange(bK);bK.Clear();if(!dp)GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt;(bK,
                mz);else mG&lt;IMyShipConnector&gt;(ref bK);foreach(var c in bK){if(c.CustomName.Contains("Ejector")||c.CustomData.Contains("Ejector"))
                continue;else dh.Add(c);}bK.Clear();if(!dp)GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt;(bK,mz);else
                mG&lt;IMyShipDrill&gt;(ref bK);dh.AddRange(bK);bK.Clear();if(!dp)GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt;(bK,
                mz);else mG&lt;IMyShipWelder&gt;(ref bK);dh.AddRange(bK);bK.Clear();if(!dp)GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt;(bK,
                mz);else mG&lt;IMyShipGrinder&gt;(ref bK);dh.AddRange(bK);dd=-1;de=-1;}void dr(){if(dh==null)dq();if(dh.Count
                &lt;1){dd=-1;de=-1;return;}dj=0.0;double ds=0.0;double dt=0;for(int i=0;i&lt;dh.Count;i++){ds+=du(dh[i]);}
                if(ds&gt;0){dt=(dj/ds)*100;}else{dt=100;}dd=(int)dt;}double du(IMyTerminalBlock dv){double bE=-1;var dw
                =dv.InventoryCount;for(var dx=0;dx&lt;dw;dx++){var dy=dv.GetInventory(dx);if(dy!=null){dj+=(double)dy.CurrentVolume;
                if((double)dy.MaxVolume&gt;9223372036854){di=true;}else{di=false;}if(!di){bE=(double)dy.MaxVolume;double
                dz=dA(dv);if(dz&gt;0)de=bE/dz;}else{bE=dA(dv)*10;de=9999;}}}return bE;}double dA(IMyTerminalBlock theContainer)
                {var dy=theContainer.GetInventory(0);string dB=theContainer.BlockDefinition.SubtypeId;double bE=(double)dy.MaxVolume;
                if(bE&lt;999999999)return bE;if(theContainer is IMyCargoContainer){if(dB.Contains("LargeBlockLargeContainer"))
                bE=421.875008;else if(dB.Contains("LargeBlockSmallContainer"))bE=15.625;else if(dB.Contains("SmallBlockLargeContainer"))
                bE=15.625;else if(dB.Contains("SmallBlockMediumContainer"))bE=3.375;else if(dB.Contains("SmallBlockSmallContainer"))
                bE=0.125;else if(dB.Contains("Azimuth_LargeContainer"))bE=7780.8;else if(dB.Contains("Azimuth_MediumLargeContainer"))
                bE=1945.2;else if(dB.Contains("Azimuth_MediumContainer"))bE=1878.6;else if(dB.Contains("Azimuth_SmallContainer"))
                bE=10.125;}else if(dB.Contains("SmallBlockDrill"))bE=3.375;else if(dB.Contains("LargeBlockDrill"))bE
                =23.4375;else if(dB.Contains("ConnectorMedium"))bE=1.152;else if(dB.Contains("ConnectorSmall"))bE=0.064;
                else if(dB.Contains("Connector"))bE=8.000;else if(dB.Contains("LargeShipWelder"))bE=15.625;else if(dB.Contains("LargeShipGrinder"))
                bE=15.625;else if(dB.Contains("SmallShipWelder"))bE=3.375;else if(dB.Contains("SmallShipGrinder"))bE
                =3.375;else{Echo("Unknown cargo for default Capacity:"+theContainer.DefinitionDisplayNameText+":"+theContainer.BlockDefinition.SubtypeId);
                bE=12;}return bE;}const int dC=0;const int CRAFT_MODE_SLED=2;const int dE=4;const int CRAFT_MODE_ORBITAL
                =32;const int dG=64;const int dH=128;const int dI=256;const int dJ=512;const int dK=1024;const int dL
                =2048;const int dM=0xfff;string craftOperation(){string dO="FLAGS:";if((il&amp;CRAFT_MODE_SLED)&gt;0)dO+="SLED ";
                if((il&amp;CRAFT_MODE_ORBITAL)&gt;0)dO+="ORBITAL ";if((il&amp;dG)&gt;0)dO+="ROCKET ";if((il&amp;dE)&gt;0)dO+="ROTOR ";if((il
                &amp;dH)&gt;0)dO+="PET ";if((il&amp;dI)&gt;0)dO+="NAD ";if((il&amp;dJ)&gt;0)dO+="NO Gyro ";if((il&amp;dL)&gt;0)dO+="No Tank ";if
                ((il&amp;dK)&gt;0)dO+="No Power ";return dO;}long dP=0;void dQ(){string dR;if(ih==null){dR=Storage;}else{dR
                =ih.GetPublicText();}if(iniWicoCraftSave==null)return;iniWicoCraftSave.nD(dR);iniWicoCraftSave.nS(@if,
                "SaveID",ref dP);if(dS())iniWicoCraftSave.nD("");t(iniWicoCraftSave);iniWicoCraftSave.nS(@if,"Mode",
                ref ge,true);iniWicoCraftSave.nS(@if,"current_state",ref ij,true);iniWicoCraftSave.nS(@if,"PassedArgument",
                ref sPassedArgument,true);iniWicoCraftSave.nS(@if,"AlertStates",ref@in,true);iniWicoCraftSave.nS(@if,
                "craft_operation",ref il,true);iniWicoCraftSave.nS(@if,"PassedArgument",ref sPassedArgument);iniWicoCraftSave.nS(@if,
                "ReceivedMessage",ref io);}bool dS(){if(ih==null)return false;if(dP==(long)ih.EntityId)return false;
                else return true;}bool dT(string dU){dU=dU.Trim().ToLower();return(dU=="True"||dU=="true");}Dictionary&lt;long,
                MyDetectedEntityInfo&gt;dV=new Dictionary&lt;long,MyDetectedEntityInfo&gt;();void dW(MyDetectedEntityInfo thisDetectedInfo)
                {if(thisDetectedInfo.EntityId!=0){if(!dV.ContainsKey(thisDetectedInfo.EntityId)){dV.Add(thisDetectedInfo.EntityId,
                thisDetectedInfo);}else{dV[thisDetectedInfo.EntityId]=thisDetectedInfo;}}else Echo("Not adding: Zero Entity");
                }string dX(MyDetectedEntityInfo W){string s="";s+="ETBV";s+=":"+W.EntityId.ToString();s+=":"+W.TimeStamp;
                Vector3D dY=W.BoundingBox.Min;s+=":"+ir(dY);Vector3D dZ=W.BoundingBox.Max;s+=":"+ir(dZ);Vector3D ea=
                (Vector3)W.Velocity;s+=":"+ir(ea);return s;}void eb(){Echo("mode="+ge.ToString());if(ge==gf)ed();if(ge
                ==gR)he();else if(ge==gi){fr("clear",fb);fr(b+":ATTENTION!",fb);fr(b+": current_state="+ij.ToString(),
                fb);fr("\nCraft Needs attention",fb);}}void ec(){fr(DateTime.Now.ToString()+" ACTION: Reset To Idle",
                eZ,true);n();gV(gf);if(fX&gt;0&amp;&amp;la()&amp;&amp;ge!=gk&amp;&amp;ge!=gs&amp;&amp;!((il&amp;CRAFT_MODE_ORBITAL)&gt;0)&amp;&amp;!((il&amp;dI)&gt;0))gV(go);
                }void ed(){fr("clear",fb);fr(a+":"+b+":Manual Control (idle)",fb);if(fX&gt;0&amp;&amp;la()&amp;&amp;ge!=gk&amp;&amp;ge!=gs&amp;&amp;!((il
                &amp;CRAFT_MODE_ORBITAL)&gt;0)&amp;&amp;!((il&amp;dI)&gt;0))gV(go);}List&lt;IMyTerminalBlock&gt;ee=new List&lt;IMyTerminalBlock&gt;();
                string ef(){ee.Clear();ee=mG&lt;IMyGasGenerator&gt;();return"GG"+ee.Count.ToString("00");}void eg(bool bL=
                true){bJ(ee,bL);}bool eh(){return true;}void ei(){if(ev()&gt;99){bJ(ee,false);}else{bJ(ee,true);}}List&lt;IMyTerminalBlock&gt;
                ej=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;ek=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                el=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;em=new List&lt;IMyTerminalBlock&gt;();const int en=1;
                const int eo=2;int ep=0;int eq=0;double er=-1;double es=-1;void TanksCalculate(){er=ev(eo);es=ev(en);
                }string eu(){{ej=new List&lt;IMyTerminalBlock&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyGasTank&gt;(ej,(x=&gt;
                x.CubeGrid==Me.CubeGrid));}ep=0;eq=0;for(int i=0;i&lt;ej.Count;++i){if(eD(ej[i])==en){if(ej[i].CustomName.ToLower().Contains("isolated"))
                em.Add(ej[i]);else ek.Add(ej[i]);eq++;}else if(eD(ej[i])==eo){el.Add(ej[i]);ep++;}}return"T"+ej.Count.ToString("00");
                }double ev(List&lt;IMyTerminalBlock&gt;ej){double ew=0;int ex=0;for(int i=0;i&lt;ej.Count;++i){{IMyGasTank ey
                =ej[i]as IMyGasTank;if(ey==null)continue;float ez=(float)ey.FilledRatio;ew+=ez;ex++;}}if(ex&gt;0){return
                ew*100/ex;}else return 0;}double ev(int iTypes=0xff){if(ej.Count&lt;1)eu();if(ej.Count&lt;1)return-1;double
                eB=0;int ex=0;for(int i=0;i&lt;ej.Count;++i){int eC=eD(ej[i]);if((eC&amp;iTypes)&gt;0){IMyGasTank ey=ej[i]as IMyGasTank;
                if(ey==null)continue;float ez=(float)ey.FilledRatio;eB+=ez;ex++;}}if(ex&gt;0){return eB/ex;}else return
                -1;}int eD(IMyTerminalBlock eE){if(eE is IMyGasTank){if(eE.BlockDefinition.SubtypeId.Contains("Hydro"))
                return eo;else return en;}return 0;}void eF(bool eG=true,int eA=0xff){if(ej.Count&lt;1)eu();if(ej.Count
                &lt;1)return;for(int i=0;i&lt;ej.Count;++i){int eC=eD(ej[i]);if((eC&amp;eA)&gt;0){IMyGasTank ey=ej[i]as IMyGasTank;
                if(ey==null)continue;ey.Stockpile=eG;}}}string eH="[DOCK]";List&lt;IMyTerminalBlock&gt;eI=new List&lt;IMyTerminalBlock&gt;();
                void eJ(nr u){u.nS(kU,"GearUse",ref eH,true);}void eK(){if(eI.Count&lt;1)eI=mI&lt;IMyLandingGear&gt;(eH);if(eI.Count
                &lt;1)eI=mG&lt;IMyLandingGear&gt;();return;}string eL(){{eI.Clear();eK();}return"LG"+eI.Count.ToString("00");
                }bool eM(){for(int i=0;i&lt;eI.Count;i++){IMyLandingGear eN;eN=eI[i]as IMyLandingGear;if(eN!=null&amp;&amp;eN.IsLocked)
                return true;}return false;}bool eO(IMyTerminalBlock bq){var g=bq as IMyLandingGear;if(g==null)return
                false;return((int)g.LockMode==1);}bool eP(){var eQ=new StringBuilder();for(int i=0;i&lt;eI.Count;i++){if
                (eO(eI[i]))return true;}return false;}void eR(bool eS=true){for(int i=0;i&lt;eI.Count;i++){IMyLandingGear
                g=eI[i]as IMyLandingGear;if(g==null)continue;if(eS)g.Lock();else g.Unlock();}}string eT="LOGGING";void
                eU(nr u){u.nS(eT,"TextPanelReport",ref sTextPanelReport,true);u.nS(eT,"StatusName",ref eY,true);u.nS(eT,
                "LongStatus",ref fa,true);u.nS(eT,"RangeReport",ref eW,true);u.nS(eT,"SledReport",ref fg,true);u.nS(eT,
                "GPSTag",ref fe,true);}fj eV=null;string eW="[RANGE]";fj eX=null;string eY="Wico Craft Status";fj eZ
                =null;string fa="Wico Craft Log";fj fb=null;string sTextPanelReport="Craft Report";fj gpsPanel=null;
                string fe="[GPS]";fj ff=null;string fg="[SMREPORT]";bool fh=false;bool fi=false;public class fj{Program
                cy;string fk="";List&lt;IMyTextPanel&gt;fl=new List&lt;IMyTextPanel&gt;();string fm="";string fn="";bool fo=false;
                bool fp=true;public fj(Program pg,string cs,bool fq=false){cy=pg;fk=cs;fo=fq;fp=true;fm="";fn="";fl.Clear();
                fl=cy.mK(fk);if(fl.Count&lt;1)fl=cy.mJ(fk);}public void fr(string fs,bool ft=false){if(fs=="clear"){fm=
                "";fn="X";fp=false;return;}if(fo&amp;&amp;fp){fp=false;if(fl.Count&gt;0){fm=fl[0].GetPublicText();fn="X";}}if(ft)
                {fm=fs+"\n"+fm;}else fm+=fs+"\n";}public void fu(){if(fn!=fm){fp=true;foreach(var t in fl){t.WritePublicText(fm);
                }fn=fm;}}}void fv(){eX=fA(true);eZ=fx(fa,true);;fb=fx(sTextPanelReport);eV=fx(eW);gpsPanel=fx(fe,lm);
                ff=fx(fg);fh=true;}void fw(){if(eX!=null)eX.fu();if(eZ!=null)eZ.fu();if(fb!=null)fb.fu();if(eV!=null)
                eV.fu();if(gpsPanel!=null)gpsPanel.fu();if(ff!=null)ff.fu();}fj fx(string stheName,bool bRefresh=false)
                {fj fz=new fj(this,stheName,bRefresh);return fz;}fj fA(bool force_update=false){if((eX!=null||fh)&amp;&amp;!force_update)
                return eX;eX=fx(eY);return eX;}void fr(string text,fj wLog,bool bReverse=false){if(wLog==null)return;
                wLog.fr(text,bReverse);}void fD(string fs){fr(fs,fA());if(fi&amp;&amp;fs!="clear")Echo(fs);}string fE(double
                fF){int fG=75;if(fF&lt;0)fF=0;int fH=(int)(fF*fG)/100;if(fH&gt;fG)fH=fG;string dO="["+new String('|',fH)+new
                String('\'',fG-fH)+"]";return dO;}void fI(string cs,Vector3D fJ){string s1;s1="GPS:"+cs+":"+ir(fJ)+":";
                fr(s1,gpsPanel);}string fK(string fL,string fM){string s;int fN=fL.Length;int fO=fM.Length;if(fN+fO&gt;
                32){if(fO&gt;31)return"INVALID";fN=32-fO;}s=fL.Substring(0,fN)+fM;s.Replace(":","_");s.Replace(";","_");
                return s;}string fP(double fQ){string fR="";if(fQ&gt;1000){fR=fQ.ToString("N0")+"km";}else if(fQ&gt;10){fR
                =fQ.ToString("0.0")+"m";}else{fR=fQ.ToString("0.000")+"m";}return fR;}void fS(){}void fT(nr fU){kV(fU);
                jb(fU);mR(fU);bZ(fU);eJ(fU);or(fU);dg(fU);}string fV="";int fW=0;double fX=0;string doInit(){Echo(ma.Count.ToString()
                +" Blocks");do{lI("Init:"+fW+" ");switch(fW){case 0:fr(DateTime.Now.ToString()+" "+a+":"+b+":INIT",eZ,
                true);break;case 1:if(!lh.ContainsKey("doscans"))lh.Add("doscans",gR);break;case 2:fV+=mk();break;case
                3:fv();break;case 4:kd();break;case 5:fV+=SerializeInit();dQ();break;case 6:fV+=DefaultOrientationBlockInit();
                break;case 7:dq();break;case 8:os();break;case 9:fV+=jc(mN);break;case 10:fV+=nn();break;case 11:if(mN
                is IMyRemoteControl){Vector3D fZ;bool ga=((IMyRemoteControl)mN).GetNearestPlayer(out fZ);IMyRemoteControl
                gb=(IMyRemoteControl)mN;gb.SetCollisionAvoidance(false);gb.SetDockingMode(false);gb.Direction=Base6Directions.Direction.Forward;
                gb.FlightMode=FlightMode.OneWay;gb.ClearWaypoints();}break;case 12:fV+=ox(mN);break;case 13:fV+=hw();
                break;case 14:fV+=kW();break;case 15:fV+=eu();break;case 16:fV+=lL();break;case 17:fV+=cl(mN);break;
                case 18:fV+=lR();break;case 19:fV+=km();break;case 20:fV+=ef();break;case 21:q();break;case 22:if(kj)
                li="*"+a+":"+b+" V"+c+" ";if(li.Length&gt;34){li=a+":"+b+"\nV"+c+" ";}if(mN is IMyShipController){MyShipMass
                gc;gc=((IMyShipController)mN).CalculateShipMass();fX=gc.BaseMass;}fV+=gd();lt=true;break;}fW++;}while
                (!lt&amp;&amp;(((float)Runtime.CurrentInstructionCount/(float)Runtime.MaxInstructionCount)&lt;0.5f));if(lt)fW=0;
                fD(fV);return fV;}string gd(){return"&gt;";}int ge=0;const int gf=0;const int gg=1;const int gh=2;const
                int gi=3;const int gj=4;const int gk=5;const int gl=7;const int gm=8;const int gn=9;const int go=13;
                const int gp=10;const int gq=11;const int gr=12;const int gs=14;const int gt=15;const int gu=16;const
                int gv=17;const int gw=18;const int gx=19;const int gy=20;const int gz=21;const int gA=22;const int gB
                =23;const int gC=24;const int gD=25;const int gE=26;const int gF=27;const int gG=28;const int gH=29;
                const int gI=30;const int gJ=31;const int gK=50;const int gL=60;const int gM=111;const int gN=200;const
                int gO=210;const int gP=220;const int gQ=290;const int gR=400;const int gS=410;const int gT=500;const
                int gU=510;void gV(int gW){if(ge==gW)return;ge=gW;ij=0;ki();}cw gX;cw gY;cw gZ;cw ha;cw hb;cw hc;double
                hd=0;void he(){fr("clear",fb);fr(b+":SCAN!",fb);Echo("Scan:current_state="+ij.ToString());switch(ij)
                {case 0:{n();hd=0;gX=new cw(this,bP,5000);gY=new cw(this,bQ,5000);gZ=new cw(this,bT,5000);ha=new cw(this,
                bU,5000);hb=new cw(this,bS,5000);hc=new cw(this,bR,5000);ij=410;break;}case 410:{fr("Long Range Scan",
                fb);if(gX==null)ij=0;bWantMedium=true;hd+=Runtime.TimeSinceLastRun.TotalMilliseconds;if(gX.cY()){S(gX.cN);
                }if(gY.cY()){S(gY.cN);}if(gZ.cY()){S(gZ.cN);}if(ha.cY()){S(ha.cN);}if(hb.cY()){S(hb.cN);}if(hc.cY())
                {S(hc.cN);}string s="";s+="Front: ";if(gX.cV())s+="DONE!";else{s+=gX.cz.ToString("0")+" meters";}s+=
                " "+gX.cN.Count+" asteroids";s+="\n";s+="Back: ";if(gY.cV())s+="DONE!";else{s+=gY.cz.ToString("0")+" meters";
                }s+=" "+gY.cN.Count+" asteroids";s+="\n";s+="Left: ";if(gZ.cV())s+="DONE!";else{s+=gZ.cz.ToString("0")
                +" meters";}s+=" "+gZ.cN.Count+" asteroids";s+="\n";s+="Right: ";if(ha.cV())s+="DONE!";else{s+=ha.cz.ToString("0")
                +" meters";}s+=" "+ha.cN.Count+" asteroids";s+="\n";s+="Top: ";if(hb.cV())s+="DONE!";else{s+=hb.cz.ToString("0")
                +" meters";}s+=" "+hb.cN.Count+" asteroids";s+="\n";s+="Bottom: ";if(hc.cV())s+="DONE!";else{s+=hc.cz.ToString("0")
                +" meters";}s+=" "+hc.cN.Count+" asteroids";s+="\n";if(X()&lt;0)s+="No Known Asteroid";else s+="FOUND at least one asteroid!";
                fr(s,fb);Echo(s);if(gX.cV()&amp;&amp;gY.cV()&amp;&amp;gZ.cV()&amp;&amp;ha.cV()&amp;&amp;hb.cV()&amp;&amp;hc.cV()){gV(gS);}break;}}}Vector3D hf;
                bool hg=false;DateTime hh;double hi=100;double hj=50;bool hk=false;bool hl=true;bool hm=true;bool hn
                =true;float ho=-1;string hp="NAV";void hq(nr u){u.nS(hp,"DTMDebug",ref hk,true);u.nS(hp,"CameraCollision",
                ref hl,true);u.nS(hp,"SensorCollision",ref hm,true);u.nS(hp,"NAVEmulateOld",ref hn,true);u.nS(hp,"NAVGravityMinElevation",
                ref ho,true);}void hr(nr u){u.of(hp,"vTarget",hf);u.of(hp,"ValidNavTarget",hg);u.of(hp,"dStartShip",
                hh);u.of(hp,"shipSpeedMax",hi);u.of(hp,"arrivalDistanceMin",hj);}void hs(nr u){u.nS(hp,"vTarget",ref
                hf,true);u.nS(hp,"ValidNavTarget",ref hg,true);u.nS(hp,"dStartShip",ref hh,true);u.nS(hp,"shipSpeedMax",
                ref hi,true);u.nS(hp,"arrivalDistanceMin",ref hj,true);}List&lt;IMyTerminalBlock&gt;ht=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;hu=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;hv=new List&lt;IMyTerminalBlock&gt;();
                string hw(){ht.Clear();hu.Clear();hv.Clear();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(ht,mz);
                for(int i=0;i&lt;ht.Count;i++){if(ht[i].CustomName.Contains("[LEFT]")||ht[i].CustomData.Contains("[LEFT]"))
                {hu.Add(ht[i]);}else if(ht[i].CustomName.Contains("[RIGHT]")||ht[i].CustomData.Contains("[RIGHT]")){
                hv.Add(ht[i]);}}return"NR:L"+hu.Count.ToString("0")+"R"+hv.Count.ToString("0");}bool hx(float hy){if
                (hu.Count&lt;1)return false;float hz=hu[0].GetMaximum&lt;float&gt;("Velocity");var hA=hu[0]as IMyMotorStator;
                float hB=hA.TargetVelocityRPM;float hC=(hB/hz*100);hC=Math.Abs(hC);if(hy&gt;(hC+5f))hy=hC+5;if(hy&lt;(hC-5))
                hy=hC-5;if(hy&lt;0f)hy=0f;if(hy&gt;100f)hy=100f;if(Math.Abs(hy)&gt;0){hx(hu,-hy);hx(hv,hy);return true;}else return
                false;}bool hx(List&lt;IMyTerminalBlock&gt;rotorList,float hy){for(int i=0;i&lt;rotorList.Count;i++){var hA=rotorList[i]
                as IMyMotorStator;float hz=hA.GetMaximum&lt;float&gt;("Velocity");if(!hA.Enabled)hA.Enabled=true;float hE=
                hz*(hy/100.0f);hA.TargetVelocityRPM=hE;}return true;}bool hF(){hF(hu);hF(hv);return true;}bool hF(List&lt;IMyTerminalBlock&gt;
                rotorList){for(int i=0;i&lt;rotorList.Count;i++){IMyMotorStator hA=rotorList[i]as IMyMotorStator;hA.TargetVelocityRPM
                =0;}return true;}bool hG(double hH){float hy;if(Math.Abs(hH)&gt;1.0){hy=50;}else if(Math.Abs(hH)&gt;.7){hy
                =50;}else if(Math.Abs(hH)&gt;0.5){hy=30;}else if(Math.Abs(hH)&gt;0.1){hy=20;}else if(Math.Abs(hH)&gt;0.01){hy
                =5;}else if(Math.Abs(hH)&gt;0.001){hy=0;}else hy=0;hy/=3;hy=hy*-Math.Sign(hH);if(Math.Abs(hy)&gt;0){hx(hu,
                hy);}if(Math.Abs(hy)&gt;0){hx(hv,hy);}if(Math.Abs(hy)&gt;0)return false;else return true;}bool hI(string hJ)
                {string[]hK=hJ.Trim().Split(';');for(int hL=0;hL&lt;hK.Length;hL++){string[]hM=hK[hL].Trim().Split(' ');
                if(hM[0]=="timer"){s();}else if(hM[0]=="idle")ec();else if(hM[0]=="masterreset")p();else if(hM[0].ToLower()
                =="coast"){if(iF.Count&gt;1){bM(iF);}}else if(hM[0]=="setvaluef"){Echo("SetValueFloat");string hN="";for
                (int i=1;i&lt;hM.Length;i++){hN+=hM[i];if(i&lt;hM.Length-1){hN+=" ";}}string[]hO=hN.Trim().Split(':');if(hO.Length
                &lt;3){Echo("Invalid Args");continue;}IMyTerminalBlock bq;bq=(IMyTerminalBlock)GridTerminalSystem.GetBlockWithName(hO[0]);
                if(bq==null){Echo("Block not found:"+hO[0]);continue;}float hP=0;bool hQ=float.TryParse(hO[2].Trim(),
                out hP);if(!hQ){Echo("invalid float value:"+hO[2]);continue;}Echo("SetValueFloat:"+hO[0]+" "+hO[1]+" to:"
                +hP.ToString());bq.SetValueFloat(hO[1],hP);}else if(hM[0]=="brake"){Echo("brake");if(mN is IMyShipController)
                {IMyShipController hR=mN as IMyShipController;bool hS=hR.HandBrake;hR.ApplyAction("HandBrake");}else
                Echo("No Ship Controller found");}else if(hM[0]=="namecameras"){cq(bP,"Front");cq(bQ,"Back");cq(bR,"Down");
                cq(bS,"Up");cq(bT,"Left");cq(bU,"Right");}else if(hM[0]=="wcct"||hM[0]==""){}else{int hT;if(lh.TryGetValue(hM[0].ToLower(),
                out hT)){gV(hT);}else Echo("Unrecognized Command:"+hK[hL]);}}return false;}double hU=-1;List&lt;IMyTerminalBlock&gt;
                hV=new List&lt;IMyTerminalBlock&gt;();void hW(){hV.Clear();mG&lt;IMyReactor&gt;(ref hV);float hX;hZ(out hX);}double
                hY(){double j=0;foreach(var tb in hV){IMyReactor r=tb as IMyReactor;j+=r.CurrentOutput;}return j;}bool
                hZ(out float currentOutput){currentOutput=0;hU=-1;bool ia=false;if(hV.Count&gt;0)hU=0;foreach(IMyReactor
                r in hV){currentOutput+=r.CurrentOutput;hU+=r.MaxOutput;}return ia;}void ib(){if(iniWicoCraftSave==null)
                return;v(iniWicoCraftSave);iniWicoCraftSave.of(@if,"Mode",ge.ToString());iniWicoCraftSave.of(@if,"current_state",
                ij.ToString());iniWicoCraftSave.of(@if,"PassedArgument",sPassedArgument);iniWicoCraftSave.of(@if,"AlertStates",
                @in.ToString());iniWicoCraftSave.of(@if,"craft_operation",il.ToString());iniWicoCraftSave.of(@if,"PassedArgument",
                sPassedArgument);iniWicoCraftSave.of(@if,"ReceivedMessage",io);long ic=0;if(ih!=null)ic=ih.EntityId;
                iniWicoCraftSave.of(@if,"SaveID",(long)ic);if(iniWicoCraftSave.nC){if(iniWicoCraftSave.nC){string id
                =iniWicoCraftSave.oj();if(ih==null){Storage=id;}else{ih.WritePublicText(id,false);}}}else{Echo("Not saving: Same");
                }}string ie="Wico Craft Save";string@if="WCCM2";void SerializeInitCustomData(nr iNIHolder){iNIHolder.nS(@if,
                "SAVE_FILE_NAME",ref ie,true);}IMyTextPanel ih=null;nr iniWicoCraftSave;int ij=0;long allBlocksCount
                =0;int il=dC;string sPassedArgument="";int@in=0;string io="";string SerializeInit(){string fV="S";ih
                =null;List&lt;IMyTerminalBlock&gt;bK=new List&lt;IMyTerminalBlock&gt;();bK=mM&lt;IMyTextPanel&gt;(ie);if(bK.Count&gt;1)Echo("Multiple blocks found: \""
                +ie+"\"");else if(bK.Count==0){bK=mI&lt;IMyTextPanel&gt;(ie);if(bK.Count==1)ih=bK[0]as IMyTextPanel;else{bK
                =mL&lt;IMyTextPanel&gt;(ie);if(bK.Count==1)ih=bK[0]as IMyTextPanel;}}else ih=bK[0]as IMyTextPanel;iniWicoCraftSave
                =new nr(this,"");if(ih==null){fV="-";Echo(ie+" (TextPanel) is missing or Named incorrectly. ");}return
                fV;}bool iq(){return ih!=null;}string ir(Vector3D v){string s;s=v.X.ToString("0.00")+":"+v.Y.ToString("0.00")
                +":"+v.Z.ToString("0.00");return s;}bool@is(string sVector,out double x,out double y,out double z){string[]
                iu=sVector.Trim().Split(',');if(iu.Length&lt;3){iu=sVector.Trim().Split(':');}x=0;y=0;z=0;if(iu.Length&lt;
                3)return false;bool iv=double.TryParse(iu[0].Trim(),out x);bool iw=double.TryParse(iu[1].Trim(),out y);
                bool ix=double.TryParse(iu[2].Trim(),out z);if(!iv||!iw||!ix){return false;}return true;}List&lt;IMyTerminalBlock&gt;
                iy=new List&lt;IMyTerminalBlock&gt;();float iz=0;double iA=-1;void iB(){iy.Clear();iA=-1;GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt;(iy,
                mz);iC();}void iC(){if(iy.Count&gt;0)iA=0;iz=0;foreach(var tb in iy){IMySolarPanel r=tb as IMySolarPanel;
                iA+=r.MaxOutput;iz+=r.CurrentOutput;}}List&lt;IMyTerminalBlock&gt;iD=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                iE=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;iF=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                iG=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;iH=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                iI=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;iJ=new List&lt;IMyTerminalBlock&gt;();double iK=0;double
                iL=0;double iM=0;double iN=0;double iO=0;double iP=0;int iQ=0;int iR=0;int iS=0;const int iT=1;const
                int iU=2;const int iV=4;const int iW=0xff;Matrix iX=new Matrix(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);string
                iY="IGNORE";string iZ="cutter";string ja="THRUSTERS";void jb(nr iNIHolder){iNIHolder.nS(ja,"IgnoreThruster",
                ref iY);iNIHolder.nS(ja,"CutterThruster",ref iZ);}void jc(IMyTerminalBlock cm,ref List&lt;IMyTerminalBlock&gt;
                iE,ref List&lt;IMyTerminalBlock&gt;iF,ref List&lt;IMyTerminalBlock&gt;iG,ref List&lt;IMyTerminalBlock&gt;iH,ref List&lt;IMyTerminalBlock&gt;
                iI,ref List&lt;IMyTerminalBlock&gt;iJ,int jd=iW){iE.Clear();iF.Clear();iG.Clear();iH.Clear();iI.Clear();iJ.Clear();
                iD.Clear();if(cm==null)return;var je=new List&lt;IMyTerminalBlock&gt;();mG&lt;IMyThrust&gt;(ref je);for(int i=0;
                i&lt;je.Count;i++){if(je[i].CustomName.ToLower().Contains(iZ)||je[i].CustomData.ToLower().Contains(iZ))
                continue;if(je[i].CustomName.ToLower().Contains(iY)||je[i].CustomData.ToLower().Contains(iY))continue;
                iD.Add(je[i]);}Matrix cn;cm.Orientation.GetMatrix(out cn);Matrix.Transpose(ref cn,out cn);iK=0;iL=0;
                iM=0;iN=0;iO=0;iP=0;for(int i=0;i&lt;iD.Count;++i){var jf=iD[i]as IMyThrust;Matrix jg;jf.Orientation.GetMatrix(out
                jg);Vector3 cp=Vector3.Transform(jg.Backward,cn);int jh=ji(iD[i]);if(jh==iT)iS++;else if(jh==iU)iR++;
                else if(jh==iV)iQ++;if(cp==iX.Left){iO+=jj((IMyThrust)iD[i]);iI.Add(iD[i]);}else if(cp==iX.Right){iP
                +=jj((IMyThrust)iD[i]);iJ.Add(iD[i]);}else if(cp==iX.Backward){iL+=jj((IMyThrust)iD[i]);iF.Add(iD[i]);
                }else if(cp==iX.Forward){iK+=jj((IMyThrust)iD[i]);iE.Add(iD[i]);}else if(cp==iX.Up){iN+=jj((IMyThrust)iD[i]);
                iH.Add(iD[i]);}else if(cp==iX.Down){iM+=jj((IMyThrust)iD[i]);iG.Add(iD[i]);}}}string jc(IMyTerminalBlock
                cm){iE.Clear();iF.Clear();iG.Clear();iH.Clear();iI.Clear();iJ.Clear();iD.Clear();if(cm==null)return"No Orientation Block";
                var je=new List&lt;IMyTerminalBlock&gt;();mG&lt;IMyThrust&gt;(ref je);for(int i=0;i&lt;je.Count;i++){if(je[i].CustomName.ToLower().Contains(iZ)
                ||je[i].CustomData.ToLower().Contains(iZ))continue;if(je[i].CustomName.ToLower().Contains(iY)||je[i].CustomData.ToLower().Contains(iY))
                continue;iD.Add(je[i]);}Matrix cn;cm.Orientation.GetMatrix(out cn);Matrix.Transpose(ref cn,out cn);iK
                =0;iL=0;iM=0;iN=0;iO=0;iP=0;for(int i=0;i&lt;iD.Count;++i){var jf=iD[i]as IMyThrust;Matrix jg;jf.Orientation.GetMatrix(out
                jg);Vector3 cp=Vector3.Transform(jg.Backward,cn);int jh=ji(iD[i]);if(jh==iT)iS++;else if(jh==iU)iR++;
                else if(jh==iV)iQ++;if(cp==iX.Left){iO+=jj((IMyThrust)iD[i]);iI.Add(iD[i]);}else if(cp==iX.Right){iP
                +=jj((IMyThrust)iD[i]);iJ.Add(iD[i]);}else if(cp==iX.Backward){iL+=jj((IMyThrust)iD[i]);iF.Add(iD[i]);
                }else if(cp==iX.Forward){iK+=jj((IMyThrust)iD[i]);iE.Add(iD[i]);}else if(cp==iX.Up){iN+=jj((IMyThrust)iD[i]);
                iH.Add(iD[i]);}else if(cp==iX.Down){iM+=jj((IMyThrust)iD[i]);iG.Add(iD[i]);}}string s;s="&gt;";s+="F"+iE.Count.ToString("00");
                s+="B"+iF.Count.ToString("00");s+="D"+iG.Count.ToString("00");s+="U"+iH.Count.ToString("00");s+="L"+
                iI.Count.ToString("00");s+="R"+iJ.Count.ToString("00");s+="&lt;";return s;}int ji(IMyTerminalBlock theBlock)
                {if(theBlock is IMyThrust){if(theBlock.BlockDefinition.SubtypeId.Contains("Atmo"))return iT;else if(theBlock.BlockDefinition.SubtypeId.Contains("Hydro"))
                return iU;else return iV;}return 0;}double jj(IMyThrust thruster){return thruster.MaxEffectiveThrust;
                }double jk(List&lt;IMyTerminalBlock&gt;jl,int eA=iW){double jm=0;for(int jn=0;jn&lt;jl.Count;jn++){int jo=ji(jl[jn]);
                if((jo&amp;eA)&gt;0){IMyThrust jf=jl[jn]as IMyThrust;double jp=jf.MaxEffectiveThrust;jm+=jp;}}return jm;}bool
                jq(List&lt;IMyTerminalBlock&gt;jl,out float jr,out float er,out float js){jr=0;er=0;js=0;double jt=jk(jl,iV);
                double ju=jk(jl,iT);double jv=jk(jl,iU);MyShipMass gc;gc=((IMyShipController)mN).CalculateShipMass();
                double jw=0;jw=gc.PhysicalMass*lD*9.810;if(ju&gt;0){if(ju&lt;jw){jr=100;jw-=ju;}else{jr=(float)(jw/ju*100);
                if(jr&gt;0)jw-=(ju*jr/100);}}if(jt&gt;0&amp;&amp;jw&gt;0){if(jt&lt;jw){js=100;jw-=jt;}else{js=(float)(jw/jt*100);if(js&gt;0)
                jw-=((jt*js)/100);}}if(jv&gt;0&amp;&amp;jw&gt;0){if(jv&lt;jw){er=100;jw-=jv;}else{er=(float)(jw/jv*100);if(er&gt;0)jw-=((jv
                *er)/100);;}}if(jw&gt;0)return false;return true;}List&lt;IMyTerminalBlock&gt;jx(string jy){var jz=new List&lt;IMyTerminalBlock&gt;();
                var jA=new List&lt;IMyBlockGroup&gt;();GridTerminalSystem.GetBlockGroups(jA);for(int jB=0;jB&lt;jA.Count;jB++)
                {if(jA[jB].Name==jy){List&lt;IMyTerminalBlock&gt;jl=null;jA[jB].GetBlocks(jl,mz);for(int jn=0;jn&lt;jl.Count;
                jn++){jz.Add(jl[jn]);}break;}}return jz;}int jC(List&lt;IMyTerminalBlock&gt;jl,float bG,int eA=iW){int I=0;
                if(bG&gt;100)bG=100;if(bG&lt;0)bG=0;for(int jn=0;jn&lt;jl.Count;jn++){int jo=ji(jl[jn]);if((jo&amp;eA)&gt;0){IMyThrust
                jf=jl[jn]as IMyThrust;if(!jf.IsWorking){jf.Enabled=true;}I+=1;jf.ThrustOverridePercentage=bG/100f;}}
                return I;}int jC(List&lt;IMyTerminalBlock&gt;jl,int jD=100,int eA=iW){return jC(jl,(float)jD,eA);}bool jC(string
                jE,int jD=100,int eA=iW){if(jD&gt;100)jD=100;var jA=new List&lt;IMyBlockGroup&gt;();GridTerminalSystem.GetBlockGroups(jA);
                for(int jB=0;jB&lt;jA.Count;jB++){if(jA[jB].Name==jE){List&lt;IMyTerminalBlock&gt;jl=null;jA[jB].GetBlocks(jl,
                mz);return(jC(jl,jD,eA)&gt;0);}}return false;}int jF(List&lt;IMyTerminalBlock&gt;thrusters,int eA=iW,bool jG=
                false){int I=0;for(int jn=0;jn&lt;thrusters.Count;jn++){int jo=ji(thrusters[jn]);if((jo&amp;eA)&gt;0){I++;IMyThrust
                jf=thrusters[jn]as IMyThrust;jf.ThrustOverride=0;if(jf.IsWorking&amp;&amp;jG)jf.Enabled=false;else if(!jf.IsWorking
                &amp;&amp;!jG)jf.Enabled=true;}}return I;}bool jF(string jE){var jA=new List&lt;IMyBlockGroup&gt;();GridTerminalSystem.GetBlockGroups(jA);
                for(int jB=0;jB&lt;jA.Count;jB++){if(jA[jB].Name==jE){List&lt;IMyTerminalBlock&gt;jl=null;jA[jB].GetBlocks(jl,
                mz);return(jF(jl)&gt;0);}}return false;}bool jC(){return(jC(iE)&gt;0);}bool jF(){return(jF(iE)&gt;0);}double jH(List&lt;IMyTerminalBlock&gt;
                jI,int eA=iW){for(int i=0;i&lt;jI.Count;i++){int jo=ji(jI[i]);if((jo&amp;eA)&gt;0&amp;&amp;jI[i].IsWorking){var jf=jI[i]
                as IMyThrust;return jf.ThrustOverride;}}return 0;}bool jJ(List&lt;IMyTerminalBlock&gt;jI,int eA=iW){for(int
                i=0;i&lt;jI.Count;i++){int jo=ji(jI[i]);if((jo&amp;eA)&gt;0&amp;&amp;jI[i].IsWorking){return true;}}return false;}int jK(List&lt;IMyTerminalBlock&gt;
                jI,int eA=iW){int I=0;for(int i=0;i&lt;jI.Count;i++){int jo=ji(jI[i]);if((jo&amp;eA)&gt;0&amp;&amp;jI[i].IsWorking){I++;
                }}return I;}IMyThrust jL(List&lt;IMyTerminalBlock&gt;jM,int jN=iW){foreach(var thrust in iD){if(thrust is IMyThrust
                &amp;&amp;(ji(thrust)&amp;jN)&gt;0)return thrust as IMyThrust;}return null;}double jO(){if(iS&lt;1)return 0;var jP=jL(iD,
                iT);if(jP==null)return 0;return jP.MaxEffectiveThrust/jP.MaxThrust;}double jQ(List&lt;IMyTerminalBlock&gt;
                iH,double jR,double jS){var gc=((IMyShipController)mN).CalculateShipMass();double jw=0;jw=gc.PhysicalMass
                *jS*9.810;double jj=jk(iH);double jT=(jj-jw)/gc.TotalMass;double jU=jR/jT;double jV=jR/2*jU;return jV;
                }string[]jW={"-","\\","|","/","-","\\","|","/"};int jX=99;string jY(){jX++;if(jX&gt;=jW.Length)jX=0;return
                jW[jX];}const string jZ="[WCCT]";const string ka="[WCCS]";const string kb="[WCCM]";Dictionary&lt;string,
                List&lt;IMyTerminalBlock&gt;&gt;kc=new Dictionary&lt;string,List&lt;IMyTerminalBlock&gt;&gt;();void kd(){kc.Clear();}bool
                ke(string kf="[WCCS]"){bool kg=false;List&lt;IMyTerminalBlock&gt;bK=new List&lt;IMyTerminalBlock&gt;();IMyTimerBlock
                kh=null;if(kc.ContainsKey(kf)){bK=kc[kf];}else{bK=mI&lt;IMyTerminalBlock&gt;(kf);kc.Add(kf,bK);}for(int i=
                0;i&lt;bK.Count;i++){kh=bK[i]as IMyTimerBlock;if(kh!=null){kh.ApplyAction("TriggerNow");kg=true;}}return
                kg;}void ki(){Runtime.UpdateFrequency|=UpdateFrequency.Once;}bool kj=false;List&lt;IMyRadioAntenna&gt;kk=new
                List&lt;IMyRadioAntenna&gt;();List&lt;IMyLaserAntenna&gt;kl=new List&lt;IMyLaserAntenna&gt;();string km(){kk.Clear();kl.Clear();
                mG&lt;IMyRadioAntenna&gt;(ref kk);mG&lt;IMyLaserAntenna&gt;(ref kl);for(int i1=0;i1&lt;kk.Count;++i1){if(kk[i1].CustomName.Contains("unused")
                ||kk[i1].CustomData.Contains("unused"))continue;if(!kj){a="Wico "+kk[i1].CustomName.Split('!')[0].Trim();
                kj=true;}}return"A"+kk.Count.ToString("0");}void kn(){for(int i=0;i&lt;kk.Count;i++){kk[i].Enabled=true;
                }}string ko="";void kp(){if(io!=""){if(ko==io){io="";}ko=io;}else ko="";}void kq(){}void kr(){float ks
                =0;int kt=-1;for(int i=0;i&lt;kk.Count;i++){if(kk[i].AttachedProgrammableBlock==Me.EntityId){kt=i;break;
                }if(kk[i].Radius&gt;ks&amp;&amp;kk[i].AttachedProgrammableBlock==0){kt=i;ks=kk[i].Radius;}}if(kt&gt;=0){if(kk[kt].AttachedProgrammableBlock
                !=Me.EntityId)fV+="\nSetting Antenna PB";kk[kt].AttachedProgrammableBlock=Me.EntityId;}else{}}void ku(bool
                kv=false){if(kk.Count&lt;1)km();foreach(var a in kk){a.Radius=200;if(a.AttachedProgrammableBlock&gt;0||kv)
                {a.Enabled=true;}}}void kw(float kx=200,bool kv=false){if(kk.Count&lt;1)km();foreach(var a1 in kk){if(a1.AttachedProgrammableBlock
                &gt;0||kv){a1.Radius=kx;a1.Enabled=true;}}}Vector3D ky(){if(kk.Count&lt;1)km();foreach(var a1 in kk){if(a1.AttachedProgrammableBlock
                ==Me.EntityId){return a1.GetPosition();}}foreach(var a1 in kk){return a1.GetPosition();}Vector3D kz=
                new Vector3D();return kz;}void kA(bool kv=false,float kB=float.MaxValue){if(kk==null||kk.Count&lt;1)km();
                if(kB&lt;200)kB=200;foreach(var a in kk){if(a.AttachedProgrammableBlock&gt;0||kv){float kC=a.GetMaximum&lt;float&gt;("Radius");
                if(kB&lt;kC)kC=kB;a.Radius=kC;a.Enabled=true;}}}int kD(){if(kk.Count&lt;1)km();return(kk.Count);}List&lt;string&gt;
                kE=new List&lt;string&gt;();void kF(){if(kE.Count&gt;0){kG(kE[0]);kE.RemoveAt(0);}if(kE.Count&gt;0)lv=true;}void
                kG(string kH){bool kI=false;if(kk.Count&lt;1)km();for(int i=0;i&lt;kk.Count;i++){kI=kk[i].TransmitMessage(kH);
                if(kI)break;}if(!kI){if(kD()&gt;0){kE.Add(kH);lv=true;}}}List&lt;string&gt;kJ=new List&lt;string&gt;();void kK(bool
                kL=false){if(kJ.Count&gt;0){if(io==""){io=kJ[0];kJ.RemoveAt(0);if(kL){lv=true;}else{ki();}}}if(kJ.Count
                &gt;0){}}void kM(string kH){kJ.Add(kH);kK();}void kN(){if(kk.Count&gt;0){Echo(kJ.Count+" Pending Incoming Messages");
                for(int i=0;i&lt;kJ.Count;i++)Echo(i+":"+kJ[i]);}else Echo("No antennas found");}List&lt;IMyTerminalBlock&gt;
                kO=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;kP=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;
                kQ=new List&lt;IMyTerminalBlock&gt;();bool kR=false;string kS="[BASE]";string kT="[DOCK]";string kU="CONNECTORS";
                void kV(nr iNIHolder){iNIHolder.nS(kU,"BaseConnector",ref kS,true);iNIHolder.nS(kU,"DockConnector",ref
                kT,true);}string kW(){kR=false;kO.Clear();kP.Clear();kQ.Clear();kX();return"CL"+kO.Count.ToString()+
                "CD"+kP.Count.ToString()+"CB"+kQ.Count.ToString();}void kX(){if(kO.Count&lt;1&amp;&amp;!kR)kO=mG&lt;IMyShipConnector&gt;();
                if(kP.Count&lt;1&amp;&amp;!kR)kP=mI&lt;IMyShipConnector&gt;(kT);if(kP.Count&lt;1&amp;&amp;!kR)kP=kO;if(kQ.Count&lt;1&amp;&amp;!kR)kQ=mI&lt;IMyShipConnector&gt;(kS);
                kR=true;return;}bool kY(){kX();for(int i=0;i&lt;kP.Count;i++){var kZ=kP[i]as IMyShipConnector;if(kZ==null)
                continue;if(kZ.Status==MyShipConnectorStatus.Connectable)return true;}return false;}bool la(){kX();for
                (int i=0;i&lt;kP.Count;i++){var kZ=kP[i]as IMyShipConnector;if(kZ==null)continue;if(kZ.Status==MyShipConnectorStatus.Connected)
                {var lb=kZ.OtherConnector;if(lb.CubeGrid==kZ.CubeGrid){continue;}else return true;}}return false;}IMyTerminalBlock
                lc(){kX();if(kP.Count&gt;0){return kP[0];}return null;}IMyTerminalBlock ld(bool le=false){kX();for(int i
                =0;i&lt;kP.Count;i++){var kZ=kP[i]as IMyShipConnector;if(kZ==null)continue;if(kZ.Status==MyShipConnectorStatus.Connected)
                {var lb=kZ.OtherConnector;if(lb.CubeGrid==kZ.CubeGrid){continue;}else{if(!le){return kZ.OtherConnector;
                }else{return kP[i];}}}}return null;}void lf(bool lg=true,bool bL=true){kX();for(int i=0;i&lt;kP.Count;i++)
                {var kZ=kP[i]as IMyShipConnector;if(kZ==null)continue;if(kZ.Status==MyShipConnectorStatus.Connected)
                {var lb=kZ.OtherConnector;if(lb.CubeGrid==kZ.CubeGrid){continue;}}if(lg){if(kZ.Status==MyShipConnectorStatus.Connectable)
                kZ.ApplyAction("SwitchLock");}else{if(kZ.Status==MyShipConnectorStatus.Connected)kZ.ApplyAction("SwitchLock");
                }kZ.Enabled=bL;}return;}Dictionary&lt;string,int&gt;lh=new Dictionary&lt;string,int&gt;();string li="";UpdateFrequency
                lj=UpdateFrequency.Once;bool lk=true;bool ll=true;bool lm=false;float ln=100;string lo="WORLD";void lp(nr
                u){u.nS(lo,"MaxWorldMps",ref ln,true);}public Program(){fS();nr fU=new nr(this,Me.CustomData);fU.nS(a,
                "EchoOn",ref lq,true);lr=Echo;Echo=MyEcho;lp(fU);lZ(fU);eU(fU);fT(fU);if(fU.nC){Me.CustomData=fU.oj(true);
                }li=a+":"+b+" V"+c+" ";lr(li+"Creator");fv();fr("clear",eZ,true);if(!ke(kb)){Runtime.UpdateFrequency
                |=UpdateFrequency.Update100;}if(!Me.Enabled){Echo("I am turned OFF!");}}bool lq=true;Action&lt;string&gt;lr;
                void MyEcho(string j){if(lq)lr(j);}bool lt=false;bool lu=false;bool lv=false;bool bWantMedium=false;
                bool lx=false;double ly;double lz=5;double lA=-1;double lB=3;double lC=-1;double lD=-2;void Main(string
                hJ,UpdateType ut){Echo(li+jY());lv=false;bWantMedium=false;if(lA&gt;lz){lA=0;lx=false;var jM=new List&lt;IMyTerminalBlock&gt;();
                GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt;(jM,mz);for(int i=0;i&lt;jM.Count;i++){if(jM[i].IsWorking)
                {if(jM[i].CustomName.Contains("!WCC")||jM[i].CustomData.Contains("!WCC"))continue;Echo("Working local Projector found!");
                lx=true;}}}else{if(lA&lt;0){lA=lz+5;}lA+=Runtime.TimeSinceLastRun.TotalSeconds;}sPassedArgument="";double
                lE=0;if(mN is IMyShipController){if(lC&gt;lB||!lt){Echo("DO Grid Check");lC=0;MyShipMass gc;gc=((IMyShipController)mN).CalculateShipMass();
                lE=gc.BaseMass;Echo("New="+lE+" CurrentM="+fX);if(gc.BaseMass==0)Echo("No Mass--Station?");if(lE!=fX
                &amp;&amp;fX&gt;0){Echo("MASS CHANGE");fr(a+":"+b+":MASS CHANGE",eZ,true);}}else{if(lC&lt;0){lC=lB+5;}lC+=Runtime.TimeSinceLastRun.TotalSeconds;
                lE=fX;}}else{fX=lE=0;}if(hJ=="init"||(Math.Abs(lE-fX)&gt;1&amp;&amp;fX&gt;0&amp;&amp;fW==0)||(fW==0&amp;&amp;mi())){fD("INIT or GRID/MASS CHANGE!");
                Echo("Arg init or grid/mass change!");fV="";lt=false;fW=0;sPassedArgument="init";}fD("clear");if(!lt)
                {if(lx){fD("Construction in Progress\nTurn off projector to continue");fr("Construction in Progress\nTurn off projector to continue",
                fb);}else{}lv=true;doInit();lu=true;}else{if(lk)dQ();sPassedArgument=hJ;if(lu){fr(DateTime.Now.ToString()
                +" "+fV,eZ,true);}IMyTerminalBlock lF=mN;if(mN!=null){}if(mN is IMyShipController){ly=((IMyShipController)mN).GetShipSpeed();
                Vector3D lG=((IMyShipController)mN).GetNaturalGravity();double lH=lG.Length();lD=lH/9.81;}else{lD=-1.0;
                }if(hI(hJ)){fw();return;}i();eb();}if(lk)ib();if((ih==null)){if(lk)Echo("Cannot use sub-modules; missing controller and/or SaveFile");
                }else{if(lt||lu){ke();}}if(lv){Echo("FAST!");Runtime.UpdateFrequency|=lj;}else{Runtime.UpdateFrequency
                &amp;=~(lj);}if(bWantMedium){Runtime.UpdateFrequency|=UpdateFrequency.Update10;}else{Runtime.UpdateFrequency
                &amp;=~(UpdateFrequency.Update10);}lu=false;if(ll)Echo(craftOperation());m();fw();}void lI(string li=null)
                {float lJ=0;lJ=Runtime.CurrentInstructionCount/(float)Runtime.MaxInstructionCount;if(li==null)li="Instructions=";
                Echo(li+(lJ*100).ToString("0.00")+"%");}List&lt;IMyTerminalBlock&gt;lK=new List&lt;IMyTerminalBlock&gt;();string
                lL(){List&lt;IMyTerminalBlock&gt;lM=new List&lt;IMyTerminalBlock&gt;();lK.Clear();lM=mG&lt;IMyShipDrill&gt;();foreach(var
                b in lM)lK.Add(b as IMyTerminalBlock);return"D"+lK.Count.ToString("00");}void lN(){foreach(IMyFunctionalBlock
                b in lK){b.Enabled=true;}}void lO(){if(lK.Count&lt;1)lL();foreach(IMyFunctionalBlock b in lK){b.Enabled
                =false;}}bool lP(){if(lK.Count&lt;1)lL();if(lK.Count&lt;1)return false;return true;}List&lt;IMyTerminalBlock&gt;
                lQ=new List&lt;IMyTerminalBlock&gt;();string lR(){List&lt;IMyTerminalBlock&gt;lM=new List&lt;IMyTerminalBlock&gt;();lQ.Clear();
                lM=mI&lt;IMyShipConnector&gt;("Ejector");foreach(var b in lM)lQ.Add(b as IMyTerminalBlock);return"E"+lQ.Count.ToString("00");
                }void lS(){foreach(IMyFunctionalBlock b in lQ){b.Enabled=true;}}void lT(){if(lQ.Count&lt;1)lR();foreach
                (IMyFunctionalBlock b in lQ){b.Enabled=false;}}string lU="NOFOLLOW";string lV="!WCC";string lW="[NAV]";
                string lX="Craft Remote Control";string lY="GRIDS";void lZ(nr iNIHolder){iNIHolder.nS(lY,"NoFollow",
                ref lU,true);iNIHolder.nS(lY,"BlockIgnore",ref lV,true);iNIHolder.nS(lY,"OrientationBlockContains",ref
                lW,true);iNIHolder.nS(lY,"OrientationBlockNamed",ref lX,true);}List&lt;IMyTerminalBlock&gt;ma=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTextPanel&gt;mb=new List&lt;IMyTextPanel&gt;();List&lt;IMyTextPanel&gt;mc=new List&lt;IMyTextPanel&gt;();List&lt;IMyTerminalBlock&gt;
                md=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyCubeGrid&gt;me=new List&lt;IMyCubeGrid&gt;();List&lt;IMyCubeGrid&gt;mf=new List&lt;IMyCubeGrid&gt;();
                List&lt;IMyCubeGrid&gt;mg=new List&lt;IMyCubeGrid&gt;();List&lt;IMyCubeGrid&gt;mh=new List&lt;IMyCubeGrid&gt;();bool mi(){List&lt;IMyTerminalBlock&gt;
                mj=new List&lt;IMyTerminalBlock&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyTerminalBlock&gt;(mj);if(allBlocksCount
                !=mj.Count){return true;}return false;}string mk(){ma.Clear();mh.Clear();me.Clear();mf.Clear();mg.Clear();
                mb.Clear();mc.Clear();GridTerminalSystem.GetBlocksOfType&lt;IMyTerminalBlock&gt;(ma);allBlocksCount=ma.Count;
                foreach(var block in ma){var ml=block.CubeGrid;if(!mh.Contains(ml)){mh.Add(ml);}}mo(Me.CubeGrid);foreach
                (var grid in mh){if(me.Contains(grid))continue;bool mm=false;List&lt;IMyShipConnector&gt;mn=new List&lt;IMyShipConnector&gt;();
                GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt;(mn,(x1=&gt;x1.CubeGrid==grid));foreach(var connector
                in mn){if(connector.Status==MyShipConnectorStatus.Connected){if(me.Contains(connector.OtherConnector.CubeGrid)
                ||mf.Contains(connector.OtherConnector.CubeGrid)){continue;}if(me.Contains(connector.OtherConnector.CubeGrid))
                mm=true;else mm=false;}}if(mm){if(!mg.Contains(grid)){mg.Add(grid);}}if(!mf.Contains(grid)){mf.Add(grid);
                }}string s="";s+="B"+ma.Count.ToString();s+="G"+mh.Count.ToString();s+="L"+me.Count.ToString();s+="D"
                +mg.Count.ToString();s+="R"+mf.Count.ToString();return s;}void mo(IMyCubeGrid ml){if(ml==null)return;
                if(!me.Contains(ml)){me.Add(ml);mp(ml);ms(ml);mu(ml);mw(ml);}}void mp(IMyCubeGrid grid){List&lt;IMyMotorStator&gt;
                mq=new List&lt;IMyMotorStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(mq,(x=&gt;x.TopGrid==grid));
                foreach(var rotor in mq){if(rotor.CustomName.Contains(lU)||rotor.CustomData.Contains(lU))continue;mo(rotor.CubeGrid);
                }List&lt;IMyMotorAdvancedStator&gt;mr=new List&lt;IMyMotorAdvancedStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorAdvancedStator&gt;(mr,
                (x=&gt;x.TopGrid==grid));foreach(var rotor in mr){if(rotor.CustomName.Contains(lU)||rotor.CustomData.Contains(lU))
                continue;mo(rotor.CubeGrid);}}void ms(IMyCubeGrid grid){List&lt;IMyPistonBase&gt;mt=new List&lt;IMyPistonBase&gt;();
                GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt;(mt,(x=&gt;x.TopGrid==grid));foreach(var piston in mt)
                {mo(piston.CubeGrid);}}void mu(IMyCubeGrid grid){List&lt;IMyMotorStator&gt;mq=new List&lt;IMyMotorStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt;(mq,
                (x1=&gt;x1.CubeGrid==grid));foreach(var rotor in mq){if(rotor.CustomName.Contains(lU)||rotor.CustomData.Contains(lU))
                continue;IMyCubeGrid mv=rotor.TopGrid;if(mv!=null&amp;&amp;mv!=grid){mo(mv);}}mq.Clear();List&lt;IMyMotorAdvancedStator&gt;
                mr=new List&lt;IMyMotorAdvancedStator&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyMotorAdvancedStator&gt;(mr,
                (x1=&gt;x1.CubeGrid==grid));foreach(var rotor in mr){if(rotor.CustomName.Contains(lU)||rotor.CustomData.Contains(lU))
                continue;IMyCubeGrid mv=rotor.TopGrid;if(mv!=null&amp;&amp;mv!=grid){mo(mv);}}}void mw(IMyCubeGrid grid){List&lt;IMyPistonBase&gt;
                mt=new List&lt;IMyPistonBase&gt;();GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt;(mt,(x1=&gt;x1.CubeGrid==
                grid));foreach(var piston in mt){IMyCubeGrid mv=piston.TopGrid;if(mv!=null&amp;&amp;mv!=grid){if(!me.Contains(mv))
                {mo(mv);}}}}List&lt;IMyCubeGrid&gt;mx(){if(me.Count&lt;1){mk();}return me;}List&lt;IMyCubeGrid&gt;my(){if(me.Count&lt;
                1){mk();}return mg;}bool mz(IMyTerminalBlock block){return mx().Contains(block.CubeGrid);}bool IsGridLocal(long
                myCubeGrid){for(int i1=0;i1&lt;me.Count;i1++){if((long)me[i1].EntityId==myCubeGrid)return true;}return false;
                }bool mA(IMyCubeGrid mB){return mx().Contains(mB);}bool mC(IMyTerminalBlock bq){var g1=my();if(g1==null)
                return false;return g1.Contains(bq.CubeGrid);}void mD(){if(ma.Count&lt;1)mk();md.Clear();foreach(var b1
                in ma){if(mz(b1)&amp;&amp;!(b1.CustomName.Contains(lV)||b1.CustomData.Contains(lV)))md.Add(b1);}}IMyTerminalBlock
                mE(string mF){IMyTerminalBlock bq;bq=(IMyTerminalBlock)GridTerminalSystem.GetBlockWithName(mF);if(bq
                ==null)throw new Exception(mF+" Not Found");return bq;}public List&lt;T&gt;mG&lt;T&gt;(ref List&lt;T&gt;lM,string mH=null)where
                T:class{if(lM==null)lM=new List&lt;T&gt;();else lM.Clear();if(md.Count&lt;1)mD();for(int e1=0;e1&lt;md.Count;e1++)
                {if(md[e1]is T&amp;&amp;((mH==null)||(mH!=null&amp;&amp;md[e1].CustomName.StartsWith(mH)))){lM.Add((T)md[e1]);}}return
                lM;}public List&lt;IMyTerminalBlock&gt;mG&lt;T&gt;(ref List&lt;IMyTerminalBlock&gt;Output,string Keyword=null)where T:
                class{if(ma.Count&lt;1)mk();if(Output==null)Output=new List&lt;IMyTerminalBlock&gt;();else Output.Clear();if(md.Count
                &lt;1)mD();for(int e1=0;e1&lt;md.Count;e1++){if(md[e1]is T&amp;&amp;((Keyword==null)||(Keyword!=null&amp;&amp;md[e1].CustomName.StartsWith(Keyword))))
                {Output.Add(md[e1]);}}return Output;}public List&lt;IMyTerminalBlock&gt;mG&lt;T&gt;(string Keyword=null)where T:
                class{var lM=new List&lt;IMyTerminalBlock&gt;();mG&lt;T&gt;(ref lM,Keyword);return lM;}public List&lt;IMyTerminalBlock&gt;
                mI&lt;T&gt;(string Keyword=null)where T:class{var lM=new List&lt;IMyTerminalBlock&gt;();if(md.Count&lt;1)mD();for(int
                e1=0;e1&lt;md.Count;e1++){if(md[e1]is T&amp;&amp;Keyword!=null&amp;&amp;(md[e1].CustomName.Contains(Keyword)||md[e1].CustomData.Contains(Keyword)))
                {lM.Add(md[e1]);}}return lM;}public List&lt;IMyTextPanel&gt;mJ(string mH=null){if(ma.Count&lt;1)mk();var lM=new
                List&lt;IMyTextPanel&gt;();if(mb.Count&gt;1){foreach(var t1 in mb){if(mH!=null&amp;&amp;(t1.CustomName.Contains(mH)||
                t1.CustomData.Contains(mH)))lM.Add(t1);}}else{foreach(var t1 in ma){if(t1 is IMyTextPanel&amp;&amp;mz(t1)&amp;&amp;!(t1.CustomName.Contains(lV)
                ||t1.CustomData.Contains(lV))){if(mH!=null&amp;&amp;(t1.CustomName.Contains(mH)||t1.CustomData.Contains(mH)))
                lM.Add(t1 as IMyTextPanel);mb.Add(t1 as IMyTextPanel);}}}return lM;}public List&lt;IMyTextPanel&gt;mK(string
                mH=null){if(md.Count&lt;1)mD();var lM=new List&lt;IMyTextPanel&gt;();if(mc.Count&gt;1){foreach(var t1 in mc){if(mH
                !=null&amp;&amp;(t1.CustomName.Contains(mH)||t1.CustomData.Contains(mH)))lM.Add(t1);}}else{foreach(var t1 in
                md){if(t1 is IMyTextPanel&amp;&amp;Me.CubeGrid==t1.CubeGrid){if(mH!=null&amp;&amp;(t1.CustomName.Contains(mH)||t1.CustomData.Contains(mH)))
                lM.Add(t1 as IMyTextPanel);mc.Add(t1 as IMyTextPanel);}}}return lM;}public List&lt;IMyTerminalBlock&gt;mL&lt;T&gt;(string
                mH=null)where T:class{if(md.Count&lt;1)mD();var lM=new List&lt;IMyTerminalBlock&gt;();for(int e1=0;e1&lt;md.Count;
                e1++){if(md[e1]is T&amp;&amp;Me.CubeGrid==md[e1].CubeGrid&amp;&amp;mH!=null&amp;&amp;(md[e1].CustomName.Contains(mH)||md[e1].CustomData.Contains(mH)))
                {lM.Add(md[e1]);}}return lM;}public List&lt;IMyTerminalBlock&gt;mM&lt;T&gt;(string mH=null)where T:class{if(md.Count
                &lt;1)mD();var lM=new List&lt;IMyTerminalBlock&gt;();for(int e1=0;e1&lt;md.Count;e1++){if(md[e1]is T&amp;&amp;mH!=null&amp;&amp;
                md[e1].CustomName==mH){lM.Add(md[e1]);}}return lM;}IMyTerminalBlock mN=null;string DefaultOrientationBlockInit()
                {string sInitResults="";var centerSearch=new List&lt;IMyTerminalBlock&gt;();mG&lt;IMyTerminalBlock&gt;(ref centerSearch,
                lX);if(centerSearch.Count==0){centerSearch=mI&lt;IMyRemoteControl&gt;(lW);if(centerSearch.Count==0){mG&lt;IMyRemoteControl&gt;(ref
                centerSearch);if(centerSearch.Count==0){mG&lt;IMyCockpit&gt;(ref centerSearch);int i=0;for(;i&lt;centerSearch.Count;
                i++){Echo("Checking Controller:"+centerSearch[i].CustomName);if(centerSearch[i]is IMyCryoChamber)continue;
                break;}if(i&gt;=centerSearch.Count){sInitResults+="!!NO valid Controller";Echo("No Controller found");}
                else{sInitResults+="S";Echo("Using good ship Controller: "+centerSearch[i].CustomName);}}else{sInitResults
                +="R";Echo("Using First Remote control found: "+centerSearch[0].CustomName);}}}else{sInitResults+="N";
                Echo("Using Named: "+centerSearch[0].CustomName);}if(centerSearch.Count&gt;0)mN=centerSearch[0];return sInitResults;
                }string mQ="!NAV";void mR(nr u){u.nS(lY,"GyroIgnore",ref mQ,true);u.nS(lY,"LIMIT_GYROS",ref mT,true);
                u.nS(lY,"LEAVE_GYROS",ref mU,true);}double mS=0.9;int mT=3;int mU=-1;IMyShipController mV;List&lt;IMyGyro&gt;
                mW;float mX=0.01f;bool mY(string mZ){if(mV==null)nn();if(mV is IMyShipController){Vector3D na=(mV as
                IMyShipController).GetNaturalGravity();return mY(mZ,na,mN);}else{Echo("No Controller for gravity");}
                return true;}bool mY(string mZ,Vector3D nb,IMyTerminalBlock nc){bool nd=true;if(mV==null)nn();Matrix
                or;nc.Orientation.GetMatrix(out or);Vector3D ne;mZ=mZ.ToLower();if(mZ.Contains("rocket"))ne=or.Backward;
                else if(mZ.Contains("up"))ne=or.Up;else if(mZ.Contains("backward"))ne=or.Backward;else if(mZ.Contains("forward"))
                ne=or.Forward;else ne=or.Down;nb.Normalize();for(int i=0;i&lt;mW.Count;++i){var g=mW[i];g.Orientation.GetMatrix(out
                or);var nf=Vector3D.Transform(ne,MatrixD.Transpose(or));var ng=Vector3D.Transform(nb,MatrixD.Transpose(g.WorldMatrix.GetOrientation()));
                var nh=Vector3D.Cross(nf,ng);double ni=Vector3D.Dot(nf,ng);double nj=nh.Length();nj=Math.Atan2(nj,Math.Sqrt(Math.Max(0.0,
                1.0-nj*nj)));if(ni&lt;0)nj=Math.PI-nj;if(nj&lt;mX){g.GyroOverride=false;continue;}float nk=g.GetMaximum&lt;float&gt;("Yaw");
                double nl=nk*(nj/Math.PI)*mS;nl=Math.Min(nk,nl);nl=Math.Max(0.01,nl);nh.Normalize();nh*=nl;float cd=
                -(float)nh.X;g.Pitch=cd;float ce=-(float)nh.Y;g.Yaw=ce;float nm=-(float)nh.Z;g.Roll=nm;g.GyroOverride
                =true;nd=false;}return nd;}string nn(){string s="";var l=new List&lt;IMyTerminalBlock&gt;();mV=mN as IMyShipController;
                if(mV==null){if(l.Count&lt;1)return"No RC!";}nq();GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt;(l,x=&gt;x.CubeGrid
                ==mN.CubeGrid);var l2=new List&lt;IMyTerminalBlock&gt;();int no=0;for(int i=0;i&lt;l.Count;i++){if(l[i].CustomName.Contains(mQ)
                ||l[i].CustomData.Contains(mQ)){no++;continue;}l2.Add(l[i]);}mW=l2.ConvertAll(x=&gt;(IMyGyro)x);if(mT&gt;0)
                {if(mW.Count&gt;mT){mW.RemoveRange(mT,mW.Count-mT);}else{if((mU-no)&gt;0){int np=mW.Count-(mU-no);mW.RemoveRange(np,
                (mU-no));}}}nq();s+="GYRO#"+mW.Count.ToString("00")+"#";return s;}void nq(){if(mW!=null){for(int i=0;
                i&lt;mW.Count;++i){mW[i].GyroOverride=false;mW[i].Enabled=true;}}}public class nr{Dictionary&lt;string,string&gt;
                ns;Dictionary&lt;string,string[]&gt;nt;Dictionary&lt;string,Dictionary&lt;string,string&gt;&gt;nu;char nv='[';char nw=
                ']';string nx="";MyGridProgram cy;string ny="";static string[]nz={"true","yes","on","1"};const StringComparison
                nA=StringComparison.OrdinalIgnoreCase;const char nB='=';public bool nC{get;private set;}=false;public
                nr(MyGridProgram pg,string id){cy=pg;ns=new Dictionary&lt;string,string&gt;();nt=new Dictionary&lt;string,string[]&gt;();
                nu=new Dictionary&lt;string,Dictionary&lt;string,string&gt;&gt;();nD(id);}public int nD(string id){id.TrimEnd();
                if(ny==id){return ns.Count;}ns.Clear();nt.Clear();nu.Clear();nx="";nC=false;ny=id;string[]nE=id.Split('\n');
                for(int H=0;H&lt;nE.Count();H++){string nF="";nE[H].Trim();if(nE[H].StartsWith(nv.ToString())){string cs
                ="";for(int nG=1;nG&lt;nE[H].Length;nG++)if(nE[H][nG]==nw)break;else cs+=nE[H][nG];if(cs!=""){nF=cs.ToUpper();
                }else continue;H++;string nH="";var nI=new string[nE.Count()-H];int nJ=0;var nK=new Dictionary&lt;string,
                string&gt;();for(;H&lt;nE.Count();H++){nE[H].Trim();if(nE[H].StartsWith(nv.ToString())){H--;break;}nH+=nE[H]
                +"\n";nI[nJ++]=nE[H];if(nE[H].Contains(nB)){string[]nL=nE[H].Split('=');if(nL.Count()&gt;1){string nM=nL[0];
                string nN="";for(int i1=1;i1&lt;nL.Count();i1++){nN+=nL[i1];if(i1+1&lt;nL.Count())nN+=nB;}nK.Add(nM,nN);}}
                }if(!nu.ContainsKey(nF))nu.Add(nF,nK);if(!nt.ContainsKey(nF))nt.Add(nF,nI);if(!ns.ContainsKey(nF))ns.Add(nF,
                nH);}else{nx+=nE[H]+"\n";}}return ns.Count;}public string nO(string nP){string nH="";if(ns.ContainsKey(nP))
                nH=ns[nP];return nH;}public string[]nQ(string nP){string[]nR={""};if(nt.ContainsKey(nP))nR=nt[nP];return
                nR;}public bool nS(string nP,string nM,ref string nT,bool nU=false){nP=nP.ToUpper();if(nu.ContainsKey(nP))
                {var nV=nu[nP];if(nV.ContainsKey(nM)){nT=nV[nM];return true;}}if(nU)of(nP,nM,nT);return false;}public
                bool nS(string nP,string nM,ref long nW,bool nU=false){string nX="";if(!nS(nP,nM,ref nX)){if(nU){of(nP,
                nM,nW);}return false;}nW=Convert.ToInt64(nX);return true;}public bool nS(string nP,string nM,ref int
                nY,bool nU=false){string nX="";if(!nS(nP,nM,ref nX)){if(nU){of(nP,nM,nY);}return false;}nY=Convert.ToInt32(nX);
                return true;}public bool nS(string nP,string nM,ref double nZ,bool nU=false){string nX="";if(!nS(nP,
                nM,ref nX)){if(nU){of(nP,nM,nZ);}return false;}bool oa=double.TryParse(nX,out nZ);return true;}public
                bool nS(string nP,string nM,ref float ob,bool nU=false){string nX="";if(!nS(nP,nM,ref nX)){if(nU){of(nP,
                nM,ob.ToString());}return false;}bool oa=float.TryParse(nX,out ob);return true;}public bool nS(string
                nP,string nM,ref DateTime oc,bool nU=false){string nX="";if(!nS(nP,nM,ref nX)){if(nU){of(nP,nM,oc);}
                return false;}oc=DateTime.Parse(nX);return true;}public bool nS(string nP,string nM,ref Vector3D od,
                bool nU=false){string nX="";if(!nS(nP,nM,ref nX)){if(nU){of(nP,nM,od);}return false;}double x1,y1,z1;
                @is(nX,out x1,out y1,out z1);od.X=x1;od.Y=y1;od.Z=z1;return true;}public bool nS(string nP,string nM,
                ref bool oe,bool nU=false){string nX="";if(!nS(nP,nM,ref nX)){if(nU){of(nP,nM,oe);}return false;}oe=
                nz.Any(c=&gt;string.Equals(nX,c,nA));return true;}public bool of(string section,string key,string nX){if
                (ns.ContainsKey(section)){ns[section]="";}else{ns.Add(section,"");nC=true;}if(nu.ContainsKey(section))
                {var nK=new Dictionary&lt;string,string&gt;();var nV=nu[section];if(nV.ContainsKey(key)){if(nV[key]==nX)return
                false;nV[key]=nX;}else{nV.Add(key,nX);}nC=true;}else{var nK=new Dictionary&lt;string,string&gt;();nK.Add(key,
                nX);nu.Add(section,nK);nC=true;}return true;}public bool of(string nP,string nM,Vector3D od){of(nP,nM,
                ir(od));return true;}public bool of(string nP,string nM,bool oe){of(nP,nM,oe.ToString());return true;
                }public bool of(string nP,string nM,int og){of(nP,nM,og.ToString());return true;}public bool of(string
                nP,string nM,long oh){of(nP,nM,oh.ToString());return true;}public bool of(string nP,string nM,DateTime
                oc){of(nP,nM,oc.ToString());return true;}public bool of(string nP,string nM,float ob){of(nP,nM,ob.ToString());
                return true;}public bool of(string nP,string nM,double nZ){of(nP,nM,nZ.ToString());return true;}public
                void oi(string nP,string nH){nH.TrimEnd();nP=nP.ToUpper();if(ns.ContainsKey(nP)){if(ns[nP]!=nH){ns[nP]
                =nH;nC=true;}}else{nC=true;ns.Add(nP,nH);}}public string oj(bool ok=true){string ol="";string s1=nx.Trim();
                if(s1!="")ol=s1+"\n";foreach(var kv in ns){ol+=nv+kv.Key.Trim()+nw+"\n";if(kv.Value.TrimEnd()==""){string
                om="";if(nu.ContainsKey(kv.Key)){foreach(var dk in nu[kv.Key]){om+=dk.Key+nB+dk.Value+"\n";}}om+="\n";
                ol+=om;}else{ol+=kv.Value.Trim()+"\n\n";}}if(ok){nC=false;ny=ol;}return ol;}bool@is(string it,out double
                x,out double y,out double z){string[]iu=it.Trim().Split(',');if(iu.Length&lt;3){iu=it.Trim().Split(':');
                }x=0;y=0;z=0;if(iu.Length&lt;3)return false;bool iv=double.TryParse(iu[0].Trim(),out x);bool iw=double.TryParse(iu[1].Trim(),
                out y);bool ix=double.TryParse(iu[2].Trim(),out z);if(!iv||!iw||!ix){return false;}return true;}string
                ir(Vector3D v){string s;s=v.X.ToString("0.00")+":"+v.Y.ToString("0.00")+":"+v.Z.ToString("0.00");return
                s;}}int on=80;int oo=20;double op=0;string sPowerSection="POWER";void or(nr iNIHolder){iNIHolder.nS(sPowerSection,
                "batterypcthigh",ref on,true);iNIHolder.nS(sPowerSection,"batterypctlow",ref oo,true);}void os(){op=
                0;Echo("Init Reactors");hW();Echo("Init Solar");iB();Echo("Init Batteries");bu();if(hU&gt;0)op+=hU;if(bm
                &gt;0)op+=bm;}List&lt;IMyTerminalBlock&gt;ot=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;ou=new List&lt;IMyTerminalBlock&gt;();
                List&lt;IMyTerminalBlock&gt;ov=new List&lt;IMyTerminalBlock&gt;();List&lt;IMyTerminalBlock&gt;ow=new List&lt;IMyTerminalBlock&gt;();
                string ox(IMyTerminalBlock cm){ot.Clear();ou.Clear();ov.Clear();ow.Clear();mG&lt;IMyMotorSuspension&gt;(ref
                ot);for(int i=0;i&lt;ot.Count;i++){if(ot[i].CustomName.Contains("[SLED]")||ot[i].CustomData.Contains("[SLED]"))
                {ou.Add(ot[i]);if(ot[i].CustomName.Contains("[REAR]")||ot[i].CustomData.Contains("[FRONT]")){ov.Add(ot[i]);
                }if(ot[i].CustomName.Contains("[FRONT]")||ot[i].CustomData.Contains("[FRONT]")){ow.Add(ot[i]);}}}return
                "W"+ot.Count.ToString("0")+"WS"+ou.Count.ToString("0")+"SR"+ov.Count.ToString("0")+"SF"+ow.Count.ToString("0");
                }bool oy(){if(ou.Count&gt;0)return true;return false;}void oz(){for(int i1=0;i1&lt;ou.Count;i1++){var w1=ou[i1]
                as IMyMotorSuspension;w1.SetValueFloat("Friction",0);}}
              </Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>106520879375919794</EntityId>
              <Min x="0" y="8" z="9" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.2" y="-0.22" z="-0.45" />
              <CustomName>Wico Craft Save</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages />
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription>
                [WCCM2]
                Mode=0
                current_state=0
                PassedArgument=
                AlertStates=0
                craft_operation=2
                ReceivedMessage=
                SaveID=140906909218767367

                [NAV]
                vTarget=0.00:0.00:0.00
                ValidNavTarget=False
                dStartShip=01/01/0001 00:00:00
                shipSpeedMax=100
                arrivalDistanceMin=50

              </PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SensorBlock">
              <SubtypeName>SmallBlockSensor</SubtypeName>
              <EntityId>94111749409008061</EntityId>
              <Min x="0" y="9" z="9" />
              <ColorMaskHSV x="0.2" y="-0.22" z="-0.45" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>
                              [WICO]

                            </Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Sensor</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <FieldMin x="-1" y="-1" z="-1" />
              <FieldMax x="1" y="1" z="1" />
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </Toolbar>
              <PlaySound>true</PlaySound>
              <DetectPlayers>true</DetectPlayers>
              <DetectFloatingObjects>false</DetectFloatingObjects>
              <DetectSmallShips>false</DetectSmallShips>
              <DetectLargeShips>false</DetectLargeShips>
              <DetectStations>false</DetectStations>
              <DetectSubgrids>false</DetectSubgrids>
              <IsActive>true</IsActive>
              <DetectAsteroids>false</DetectAsteroids>
              <DetectOwner>true</DetectOwner>
              <DetectFriendly>true</DetectFriendly>
              <DetectNeutral>true</DetectNeutral>
              <DetectEnemy>true</DetectEnemy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="9" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="7" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="7" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="8" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="8" z="9" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="7" z="7" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="7" z="7" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="8" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="8" z="8" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-1" y="9" z="8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="1" y="9" z="8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="1" y="8" z="7" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-1" y="8" z="7" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.575" y="-0.8" z="0.61" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="7" z="8" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="8" z="8" />
              <ColorMaskHSV x="0.594444454" y="0.11" z="-0.34" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="0" y="9" z="8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="0" y="8" z="7" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.594444454" y="0.110000014" z="0.03883753" />
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="0.038899824" y="0.0238626786" z="0.0378999226" />
          <AngularVelocity x="0.0006748446" y="5.02413131E-05" z="-0.0007384334" />
          <XMirroxPlane x="0" y="8" z="8" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="8" z="13" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="8" z="14" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Thrust Forward</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>8</Y>
                  <Z>19</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>Small Hover Transport</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>110611293947986994</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="0.59672117233276367" y="9.4147500991821289" z="-1.8322334289550781" />
            <Forward x="0.855333149" y="0.390416682" z="0.340558022" />
            <Up x="-0.319628447" y="0.915001035" z="-0.2461924" />
            <Orientation>
              <X>0.06676152</X>
              <Y>-0.8159792</Y>
              <Z>0.195044562</Z>
              <W>0.540072739</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>128788689000755235</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 5906</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>107030579840758552</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="1.6829938888549805" y="4.6593145728111267" z="0.40703630447387695" />
            <Forward x="0.7207867" y="0.40344733" z="0.56364584" />
            <Up x="0.319632053" y="-0.91499877" z="0.2461959" />
            <Orientation>
              <X>0.879446864</X>
              <Y>0.09163051</Y>
              <Z>-0.4290369</Z>
              <W>0.184673846</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>137557255885798199</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 2832</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>94859534133764599</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-1.4600076675415039" y="9.2798299789428711" z="0.33655261993408203" />
            <Forward x="0.866658747" y="0.387344569" z="0.31443122" />
            <Up x="-0.319629431" y="0.9150005" z="-0.24619332" />
            <Orientation>
              <X>0.0639616549</X>
              <Y>-0.808161259</Y>
              <Z>0.1959813</Z>
              <W>0.551702559</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>102948762502296254</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 5367</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>135038888959073171</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-1.18302583694458" y="7.3181102275848389" z="1.8240694999694824" />
            <Forward x="0.831798553" y="0.395391643" z="0.389585257" />
            <Up x="0.319631457" y="-0.9149993" z="0.246195316" />
            <Orientation>
              <X>0.8304213</X>
              <Y>0.0720628947</Y>
              <Z>-0.5175906</Z>
              <W>0.193151042</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>140645626745154834</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-4.556464E-07" y="-3.3594124E-06" z="-1.33903E-06" />
          <AngularVelocity x="-4.200773E-06" y="-5.0523937E-07" z="4.53524945E-06" />
          <DisplayName>Small Grid 7256</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>82628220130206852</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="0.890749454498291" y="7.4516019821166992" z="-0.37213993072509766" />
            <Forward x="0.8480608" y="0.392142266" z="0.356394619" />
            <Up x="0.3196317" y="-0.914998949" z="0.246195346" />
            <Orientation>
              <X>0.820676267</X>
              <Y>0.06846734</Y>
              <Z>-0.5329072</Z>
              <W>0.194454774</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>117882416690280294</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 5542</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>73657306043119265</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="-0.2789616584777832" y="4.556661069393158" z="2.5726971626281738" />
            <Forward x="0.7959761" y="0.4002435" z="0.454122037" />
            <Up x="0.319631934" y="-0.9149987" z="0.2461957" />
            <Orientation>
              <X>0.8489966</X>
              <Y>0.07915757</Y>
              <Z>-0.486522675</Z>
              <W>0.19035393</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>132137183882686225</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.5" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 4208</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
    </Prefab>
  </Prefabs>
</Definitions>